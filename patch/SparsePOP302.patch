--- SparsePOP302.orig/defaultParameter.m	2016-12-29 17:09:28.000000000 +1100
+++ SparsePOP302/defaultParameter.m	2019-08-30 01:18:27.000000000 +1000
@@ -246,7 +246,7 @@
 if ~isfield(param,'relaxOrder')
     param.relaxOrder = 1; 
 %   param.relaxOrder will be updated to
-%       max{the minimum relaxation order ?½omega_{?½max}, param.relaxOrder}.
+%       max{the minimum relaxation order omega_{max}, param.relaxOrder}.
 end
 
 if ~isfield(param,'sparseSW')
--- SparsePOP302.orig/sparsePOP.m	2016-12-29 18:58:33.000000000 +1100
+++ SparsePOP302/sparsePOP.m	2019-03-27 01:34:35.000000000 +1100
@@ -534,7 +534,7 @@
 		if (param.printLevel(1) >= 1) 
 			printErrorBound(1,[],param,POP, SDPinfo);
 		end
-		if isfield(param,'printFileName') && ~isempty(param.printFileName) && isstr(param.printFileName)
+		if isfield(param,'printFileName') && ~isempty(param.printFileName) && ischar(param.printFileName)
 			fileId = fopen(param.printFileName,'a+');
 			printErrorBound(fileId,[],param,POP, SDPinfo);
 			fclose(fileId);
--- SparsePOP302.orig/V260SubPrograms/errorBound.m	2016-12-29 17:09:28.000000000 +1100
+++ SparsePOP302/V260SubPrograms/errorBound.m	2019-03-27 01:34:35.000000000 +1100
@@ -43,7 +43,7 @@
 %				fprintf('## param.binarySW\n');
 %			end
 %		end
-%		if isfield(param,'printFileName') && ~isempty(param.printFileName) && isstr(param.printFileName)
+%		if isfield(param,'printFileName') && ~isempty(param.printFileName) && ischar(param.printFileName)
 %			fileId = fopen(param.printFileName,'a+');
 %			fprintf(fileId, '\n## Cannot apply the computation of error bounds because\n');
 %			fprintf(fileId, '## exist no variable corresponding to x(%d)^2 in the SDP relaxation problem\n', i);
@@ -88,7 +88,7 @@
 %		fprintf('## exist no variable corresponding to x(%d) in the SDP relaxation problem\n', i);
 %		fprintf('## To compute error bounds, set param.reduceAMatSW = 0.\n');
 %	end
-%	if isfield(param,'printFileName') && ~isempty(param.printFileName) && isstr(param.printFileName)
+%	if isfield(param,'printFileName') && ~isempty(param.printFileName) && ischar(param.printFileName)
 %		fileId = fopen(param.printFileName,'a+');
 %		fprintf(fileId, '\n## Cannot apply the computation of error bounds because\n');
 %		fprintf(fileId, '## exist no variable corresponding to x(%d) in the SDP relaxation problem\n', i);
--- SparsePOP302.orig/V260SubPrograms/SparseCoLO/mex/mexForestConvert.cpp	2016-12-29 17:09:28.000000000 +1100
+++ SparsePOP302/V260SubPrograms/SparseCoLO/mex/mexForestConvert.cpp	2017-06-08 12:37:40.000000000 +1000
@@ -676,6 +676,7 @@
   for (int i=0; i<NoClique; ++i) {
     clique[i].finalize();
   }
+  delete[] forestNumber;
   delete[] clique;
 
   delete[] blockNumber;
--- SparsePOP302.orig/V260SubPrograms/printErrorBound.m	2016-12-29 17:09:28.000000000 +1100
+++ SparsePOP302/V260SubPrograms/printErrorBound.m	2019-03-27 01:34:35.000000000 +1100
@@ -12,7 +12,7 @@
 %		fprintf('## some variables in POP are removed by param.reduceAMatSW = 1.\n');
 %		fprintf('## To compute error bounds, set param.reduceAMatSW = 0.\n');
 %	end
-%	if isfield(param,'printFileName') && ~isempty(param.printFileName) && isstr(param.printFileName)
+%	if isfield(param,'printFileName') && ~isempty(param.printFileName) && ischar(param.printFileName)
 %		fileId = fopen(param.printFileName,'a+');
 %		fprintf(fileId, '## Cannot apply the computation of error bounds because\n');
 %		fprintf(fileId, '## some variables in POP are removed by param.reduceAMatSW = 1.\n');
--- SparsePOP302.orig/compileSparsePOP.m	2016-12-29 17:09:28.000000000 +1100
+++ SparsePOP302/compileSparsePOP.m	2017-06-08 12:37:40.000000000 +1000
@@ -20,33 +20,15 @@
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 
-if exist('verLessThan') ~= 2
-	error('Get verLessThan.m');
-end
-
-
-if verLessThan('matlab', '7.3') 
-	MexFlags = ' -O -Dlinux=0 ';
-elseif strcmp(computer, 'GLNXA64') || strcmp(computer, 'MACI64')
-	MexFlags = ' -O -Dlinux=1 -largeArrayDims ';
-elseif strcmp(computer, 'GLNX86')  || strcmp(computer, 'MACI')
-	MexFlags = ' -O -Dlinux=0 ';
-elseif strcmp(computer, 'PCWIN64') 
-	MexFlags = ' -O -Dlinux=1 -largeArrayDims ';
-elseif strcmp(computer, 'PXWIN') 
-	MexFlags = ' -O -Dlinux=0 ';
-else 
-	MexFlags = ' -O -Dlinux=0 ';
-end
+MexFlags = ' -O -Dlinux=1 -DMATLAB_MEX_FILE ';
 
 LIBfiles = ' conversion.cpp spvec.cpp polynomials.cpp sup.cpp clique.cpp mysdp.cpp Parameters.cpp ';
-if ispc % Windows family create .obj files
-        OBJfiles = strrep(LIBfiles,'.cpp','.obj');
-else
         OBJfiles = strrep(LIBfiles,'.cpp','.o');
-end
 
-eval('cd subPrograms/Mex');
+mpwd=pwd;
+mpath=mfilename("fullpath");
+mpath=mpath(1:strchr(mpath,filesep,1,'last'));
+cd(strcat(mpath,filesep,'subPrograms',filesep,'Mex'));
 fprintf('Compiling Libraries...');
 command = ['mex -c ' MexFlags LIBfiles];
 eval(command);
@@ -59,54 +41,6 @@
 command = ['mex ' MexFlags ' mexconv2.cpp ' OBJfiles ];
 eval(command);
 fprintf('done\n');
-eval('cd ../../');
-
-%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-% mex files of SparseCoLO
-%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-
-if verLessThan('matlab', '7.3') 
-	MexFlags = ' -O -Dlinux=0 ';
-elseif strcmp(computer, 'GLNXA64') || strcmp(computer, 'MACI64')  
-	MexFlags = ' -O -Dlinux=1 -largeArrayDims ';
-elseif strcmp(computer, 'GLNX86')  || strcmp(computer, 'MACI')
-	MexFlags = ' -O -Dlinux=0 ';
-elseif strcmp(computer, 'PCWIN64')
-	MexFlags = ' -O -Dlinux=1 -largeArrayDims ';
-elseif strcmp(computer, 'PCWIN')
-	MexFlags = ' -O -Dlinux=0 ';
-else
-	MexFlags = ' -O -Dlinux=0 ';
-end
-
-LIBfiles = [' ccputime.cpp'];
-if ispc % Windows family create .obj files
-        OBJfiles = strrep(LIBfiles,'.cpp','.obj');
-else
-        OBJfiles = strrep(LIBfiles,'.cpp','.o');
-end
-
-eval('cd V260SubPrograms/SparseCoLO/mex'); 
-fprintf('Compiling Libraries...');
-command = ['mex -c ' MexFlags LIBfiles];
-eval(command);
-fprintf('done\n');
-
-clear mexFiles
-
-mexFiles{1} = 'mexForestConvert.cpp';
-mexFiles{2} = 'mexMaxSpanningTree2.cpp';
-mexFiles{3} = 'mexPrimalOneSDP2.cpp';
-% mexFiles{4} = 'mexArrowTriDQOP.cpp';
-% mexFiles{5} = 'mexDiagTriDQOP.cpp';
-for i=1:length(mexFiles)
-    mexFileName = mexFiles{i};
-    fprintf('Compiling %s...',mexFileName);
-    command = ['mex ' MexFlags mexFileName OBJfiles];
-    eval(command);
-    fprintf('done\n');
-end
-
-eval('cd ../../../');
+cd(mpwd);
 
 fprintf('Compilation finished successfully.\n');
--- SparsePOP302.orig/V210SubPrograms/ExploitOptTool.m	2016-12-29 17:09:28.000000000 +1100
+++ SparsePOP302/V210SubPrograms/ExploitOptTool.m	2019-03-27 01:34:35.000000000 +1100
@@ -29,7 +29,7 @@
 		fprintf('## the SDP relaxation problem is infeasible or the solution\n');
 		fprintf('## obtained by %s is very inaccurate.\n\n', param.SDPsolver);
 	end
-	if isfield(param, 'printFileName') && isstr(param.printFileName) && param.printLevel(2) > 0
+	if isfield(param, 'printFileName') && ischar(param.printFileName) && param.printLevel(2) > 0
 		fileId = fopen(param.printFileName,'a+');
 		fprintf(fileId, '\n## Cannot apply %s of Optimiation Toolbox because\n', param.POPsolver);
 		fprintf(fileId, '## the SDP relaxation problem is infeasible or the obtained\n');
@@ -53,7 +53,7 @@
 			fprintf('## please solve this problem with param.reduceAMatSW = 0.\n\n');
 		end
 	end	
-	if isfield(param, 'printFileName') && isstr(param.printFileName) && param.printLevel(2) > 0
+	if isfield(param, 'printFileName') && ischar(param.printFileName) && param.printLevel(2) > 0
 		fileId = fopen(param.printFileName,'a+');
 		fprintf(fileId, '## Cannot apply %s of Optimiation Toolbox because\n', param.POPsolver);
 		fprintf(fileId, '## SparsePOP cannot generate an initial solution for %s.\n', param.POPsolver);
--- SparsePOP302.orig/V210SubPrograms/POPfmincon.m	2016-12-29 17:09:28.000000000 +1100
+++ SparsePOP302/V210SubPrograms/POPfmincon.m	2019-03-27 01:34:35.000000000 +1100
@@ -74,7 +74,7 @@
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 
-if isstr(objPoly)
+if ischar(objPoly)
     % Input is described in either the GAMS format or the SparsePOP format.
 	problemData = objPoly;
     if nargin == 3
--- SparsePOP302.orig/V210SubPrograms/POPlsqnonlin.m	2016-12-29 17:09:28.000000000 +1100
+++ SparsePOP302/V210SubPrograms/POPlsqnonlin.m	2019-03-27 01:34:35.000000000 +1100
@@ -75,7 +75,7 @@
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 
-if isstr(LSobjPoly)
+if ischar(LSobjPoly)
     % Input is described in either the GAMS format or the SparsePOP format.
 	problemData = LSobjPoly;
     if nargin == 3
--- SparsePOP302.orig/subPrograms/Mex/conversion.cpp	2016-12-29 17:09:28.000000000 +1100
+++ SparsePOP302/subPrograms/Mex/conversion.cpp	2017-06-08 12:37:40.000000000 +1000
@@ -2677,10 +2677,12 @@
     }
 	if(psdp.mDim <= 0){
 		cout << "# All variables are removed in sdpa format" << endl;
+        fclose(fp);
 		return;
 	}
 	if(psdp.nBlocks <= 0){
 		cout << "# All blocks are removed in sdpa format" << endl;
+        fclose(fp);
 		return;
 	}
     
--- SparsePOP302.orig/subPrograms/Mfiles/my_unique.m	2016-12-29 17:09:28.000000000 +1100
+++ SparsePOP302/subPrograms/Mfiles/my_unique.m	2017-06-08 12:37:40.000000000 +1000
@@ -2,6 +2,12 @@
 if ~strcmp(msg, 'rows');
 	error('msg should be rows in my_unique.');
 end
+
+% For Octave:
+[C, ia, ic] = unique(A,msg);
+
+% For matlab:
+%{ 
 if verLessThan('matlab', '8.0.1')
 	% This part is the same as unique in R2012b or earlier version
 	[C, ia, ic] = unique(A, msg);
@@ -10,4 +16,6 @@
 	% We use legacy mode of unique.
 	[C, ia, ic] = unique(A, msg, 'last', 'legacy');
 end
+%}
+
 return
--- SparsePOP302.orig/subPrograms/Mfiles/writeFunctions/writeParameters.m	2016-12-29 17:09:28.000000000 +1100
+++ SparsePOP302/subPrograms/Mfiles/writeFunctions/writeParameters.m	2019-03-27 01:34:35.000000000 +1100
@@ -75,14 +75,14 @@
 		if iscell(param.errorBdIdx)
 			r = size(param.errorBdIdx, 2);
 			for k=1:r
-				if isstr(param.errorBdIdx{k})
+				if ischar(param.errorBdIdx{k})
 					fprintf(fileId,'  errorBdIdx         = %s\n', param.errorBdIdx{k});
 				else
 					fprintf(fileId,'  errorBdIdx         = [%2d, %2d]\n', param.errorBdIdx{k}(1), param.errorBdIdx{k}(end));
 				end
 			end
 		else
-			if isstr(param.errorBdIdx)
+			if ischar(param.errorBdIdx)
 				fprintf(fileId,'  errorBdIdx         = %s\n', param.errorBdIdx);
 			else
 				fprintf(fileId,'  errorBdIdx         = [%2d, %2d]\n', param.errorBdIdx(1), param.errorBdIdx(end));
