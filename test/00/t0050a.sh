#!/bin/sh

prog=print_pole_zero_test.m

depends="print_pole_zero_test.m test_common.m print_pole_zero.m"

tmp=/tmp/$$
here=`pwd`
if [ $? -ne 0 ]; then echo "Failed pwd"; exit 1; fi

fail()
{
        echo FAILED ${0#$here"/"} $prog 1>&2
        cd $here
        rm -rf $tmp
        exit 1
}

pass()
{
        echo PASSED ${0#$here"/"} $prog
        cd $here
        rm -rf $tmp
        exit 0
}

trap "fail" 1 2 3 15
mkdir $tmp
if [ $? -ne 0 ]; then echo "Failed mkdir"; exit 1; fi
for file in $depends;do \
  cp -R src/$file $tmp; \
  if [ $? -ne 0 ]; then echo "Failed cp "$file; fail; fi \
done
cd $tmp
if [ $? -ne 0 ]; then echo "Failed cd"; fail; fi

#
# the output should look like this
#
cat > test.ok << 'EOF'
Ux0 = 0
Vx0 = 0
Mx0 =  8
Qx0 =  8
Rx0 =  1
Ux0=0,Vx0=0,Mx0=8,Qx0=8,Rx0=1
x0 = [   0.0000239596, ...
         0.9872172942,   0.9946842782,   1.0053441297,   1.0129482190, ...
         3.1362644579,   3.1287268399,   3.1287268399,   3.1362644579, ...
         0.5183051138,   0.5860298117,   0.7125050633,   0.8912076376, ...
         0.1408034717,   0.3836450090,   0.5434273135,   0.6191205855 ]';
Ux0_3=0,Vx0_3=0,Mx0_3=8,Qx0_3=8,Rx0_3=1
x0_3 = [     2.39596e-05, ...
              0.98721729,      0.99468428,       1.0053441,       1.0129482, ...
               3.1362645,       3.1287268,       3.1287268,       3.1362645, ...
              0.51830511,      0.58602981,      0.71250506,      0.89120764, ...
              0.14080347,      0.38364501,      0.54342731,      0.61912059 ]';
Ux1 =  8
Vx1 = 0
Mx1 =  8
Qx1 = 0
Rx1 =  1
Ux1=8,Vx1=0,Mx1=8,Qx1=0,Rx1=1
x1 = [   0.0000000000, ...
        -1.0129338404,  -1.0129338404,  -1.0052609240,  -1.0052609240, ... 
        -0.9946019547,  -0.9946019547,  -0.9872032809,  -0.9872032809, ...
         0.5183051138,   0.5860298117,   0.7125050633,   0.8912076376, ...
         0.1408034717,   0.3836450090,   0.5434273135,   0.6191205855 ]';
Ux1_3=8,Vx1_3=0,Mx1_3=8,Qx1_3=0,Rx1_3=1
x1_3 = [  0.00000e+00, ...
         -1.01293e+00, -1.01293e+00, -1.00526e+00, -1.00526e+00, ... 
         -9.94602e-01, -9.94602e-01, -9.87203e-01, -9.87203e-01, ...
          5.18305e-01,  5.86030e-01,  7.12505e-01,  8.91208e-01, ...
          1.40803e-01,  3.83645e-01,  5.43427e-01,  6.19121e-01 ]';
Ux2 =  2
Vx2 =  2
Mx2 =  22
Qx2 = 0
Rx2 =  2
Ux2=2,Vx2=2,Mx2=22,Qx2=0,Rx2=2
x2 = [   0.0055318501, ...
        -2.5170628267,  -1.3160752171, ...
        -0.9079560306,  -0.2702693669, ...
         0.5427361878,   0.6295823844,   0.8556865803,   1.0576999798, ... 
         1.1940391431,   1.2456947672,   1.2801395738,   1.3017511081, ... 
         1.3053646150,   1.3403287270,   1.3543532252, ...
         0.3906957551,   1.0945324853,   1.5609093563,   1.6003195241, ... 
         1.8756693941,   2.1815962607,   2.4936224647,   1.1146343826, ... 
         2.8130739332,   0.6636910430,   0.2206288358 ]';
Ux2_3=2,Vx2_3=2,Mx2_3=22,Qx2_3=0,Rx2_3=2
x2_3 = [   0.005531850100, ...
          -2.517062826700,  -1.316075217100, ...
          -0.907956030600,  -0.270269366900, ...
           0.542736187800,   0.629582384400,   0.855686580300,   1.057699979800, ... 
           1.194039143100,   1.245694767200,   1.280139573800,   1.301751108100, ... 
           1.305364615000,   1.340328727000,   1.354353225200, ...
           0.390695755100,   1.094532485300,   1.560909356300,   1.600319524100, ... 
           1.875669394100,   2.181596260700,   2.493622464700,   1.114634382600, ... 
           2.813073933200,   0.663691043000,   0.220628835800 ]';
Ux3 = 0
Vx3 =  2
Mx3 = 0
Qx3 =  8
Rx3 =  1
Ux3=0,Vx3=2,Mx3=0,Qx3=8,Rx3=1
x3 = [   1.0000000000, ...
        -0.1307212017,  -0.0668061890, ...
         0.5476073344,   0.7118255059,   0.7878154723,   0.9216278425, ...
         1.5186811109,   0.9636442613,   0.7282955096,   1.3538908874 ]';
Ux3_3=0,Vx3_3=2,Mx3_3=0,Qx3_3=8,Rx3_3=1
x3_3 = [   1.00000000, ...
          -0.13072120,  -0.06680619, ...
           0.54760733,   0.71182551,   0.78781547,   0.92162784, ...
           1.51868111,   0.96364426,   0.72829551,   1.35389089 ]';
EOF
if [ $? -ne 0 ]; then echo "Failed output cat of test.ok"; fail; fi

cat > test.ok.0_1 << 'EOF'
Ux0_1=0,Vx0_1=0,Mx0_1=8,Qx0_1=8,Rx0_1=1
x0_1 = [   0.0000239596, ...
           0.9872172942,   0.9946842782,   1.0053441297,   1.0129482190, ...
           3.1362644579,   3.1287268399,   3.1287268399,   3.1362644579, ...
           0.5183051138,   0.5860298117,   0.7125050633,   0.8912076376, ...
           0.1408034717,   0.3836450090,   0.5434273135,   0.6191205855 ]';
EOF
if [ $? -ne 0 ]; then echo "Failed output cat of test.ok.0_1"; fail; fi

cat > test.ok.0_2 << 'EOF'
Ux0_2=0,Vx0_2=0,Mx0_2=8,Qx0_2=8,Rx0_2=1
x0_2 = [  2.39596e-05, ...
          9.87217e-01,  9.94684e-01,  1.00534e+00,  1.01295e+00, ...
          3.13626e+00,  3.12873e+00,  3.12873e+00,  3.13626e+00, ...
          5.18305e-01,  5.86030e-01,  7.12505e-01,  8.91208e-01, ...
          1.40803e-01,  3.83645e-01,  5.43427e-01,  6.19121e-01 ]';
EOF
if [ $? -ne 0 ]; then echo "Failed output cat of test.ok.0_2"; fail; fi

cat > test.ok.1_1 << 'EOF'
Ux1_1=8,Vx1_1=0,Mx1_1=8,Qx1_1=0,Rx1_1=1
x1_1 = [   0.0000000000, ...
          -1.0129338404,  -1.0129338404,  -1.0052609240,  -1.0052609240, ... 
          -0.9946019547,  -0.9946019547,  -0.9872032809,  -0.9872032809, ...
           0.5183051138,   0.5860298117,   0.7125050633,   0.8912076376, ...
           0.1408034717,   0.3836450090,   0.5434273135,   0.6191205855 ]';
EOF
if [ $? -ne 0 ]; then echo "Failed output cat of test.ok.1_1"; fail; fi

cat > test.ok.1_2 << 'EOF'
Ux1_2=8,Vx1_2=0,Mx1_2=8,Qx1_2=0,Rx1_2=1
x1_2 = [  0.00000e+00, ...
         -1.01293e+00, -1.01293e+00, -1.00526e+00, -1.00526e+00, ... 
         -9.94602e-01, -9.94602e-01, -9.87203e-01, -9.87203e-01, ...
          5.18305e-01,  5.86030e-01,  7.12505e-01,  8.91208e-01, ...
          1.40803e-01,  3.83645e-01,  5.43427e-01,  6.19121e-01 ]';
EOF
if [ $? -ne 0 ]; then echo "Failed output cat of test.ok.1_2"; fail; fi

cat > test.ok.2_1 << 'EOF'
Ux2_1=2,Vx2_1=2,Mx2_1=22,Qx2_1=0,Rx2_1=2
x2_1 = [   0.0055318501, ...
          -2.5170628267,  -1.3160752171, ...
          -0.9079560306,  -0.2702693669, ...
           0.5427361878,   0.6295823844,   0.8556865803,   1.0576999798, ... 
           1.1940391431,   1.2456947672,   1.2801395738,   1.3017511081, ... 
           1.3053646150,   1.3403287270,   1.3543532252, ...
           0.3906957551,   1.0945324853,   1.5609093563,   1.6003195241, ... 
           1.8756693941,   2.1815962607,   2.4936224647,   1.1146343826, ... 
           2.8130739332,   0.6636910430,   0.2206288358 ]';
EOF
if [ $? -ne 0 ]; then echo "Failed output cat of test.ok.2_1"; fail; fi

cat > test.ok.2_2 << 'EOF'
Ux2_2=2,Vx2_2=2,Mx2_2=22,Qx2_2=0,Rx2_2=2
x2_2 = [  5.53185e-03, ...
         -2.51706e+00, -1.31608e+00, ...
         -9.07956e-01, -2.70269e-01, ...
          5.42736e-01,  6.29582e-01,  8.55687e-01,  1.05770e+00, ... 
          1.19404e+00,  1.24569e+00,  1.28014e+00,  1.30175e+00, ... 
          1.30536e+00,  1.34033e+00,  1.35435e+00, ...
          3.90696e-01,  1.09453e+00,  1.56091e+00,  1.60032e+00, ... 
          1.87567e+00,  2.18160e+00,  2.49362e+00,  1.11463e+00, ... 
          2.81307e+00,  6.63691e-01,  2.20629e-01 ]';
EOF
if [ $? -ne 0 ]; then echo "Failed output cat of test.ok.2_2"; fail; fi

cat > test.ok.3_1 << 'EOF'
Ux3_1=0,Vx3_1=2,Mx3_1=0,Qx3_1=8,Rx3_1=1
x3_1 = [   1.0000000000, ...
          -0.1307212017,  -0.0668061890, ...
           0.5476073344,   0.7118255059,   0.7878154723,   0.9216278425, ...
           1.5186811109,   0.9636442613,   0.7282955096,   1.3538908874 ]';
EOF
if [ $? -ne 0 ]; then echo "Failed output cat of test.ok.3_1"; fail; fi

cat > test.ok.3_2 << 'EOF'
Ux3_2=0,Vx3_2=2,Mx3_2=0,Qx3_2=8,Rx3_2=1
x3_2 = [  1.00000e+00, ...
         -1.30721e-01, -6.68062e-02, ...
          5.47607e-01,  7.11826e-01,  7.87815e-01,  9.21628e-01, ...
          1.51868e+00,  9.63644e-01,  7.28296e-01,  1.35389e+00 ]';
EOF
if [ $? -ne 0 ]; then echo "Failed output cat of test.ok.3_2"; fail; fi

#
# run and see if the results match
#
echo "Running $prog"

octave-cli -q $prog >test.out 2>&1
if [ $? -ne 0 ]; then echo "Failed running $prog"; fail; fi

diff -Bb test.ok test.out
if [ $? -ne 0 ]; then echo "Failed diff -Bb test.ok"; fail; fi

diff -Bb test.ok.0_1 print_pole_zero_test_x0_1_coef.m
if [ $? -ne 0 ]; then echo "Failed diff -Bb test.ok.0_1"; fail; fi

diff -Bb test.ok.0_2 print_pole_zero_test_x0_2_coef.m
if [ $? -ne 0 ]; then echo "Failed diff -Bb test.ok.0_2"; fail; fi

diff -Bb test.ok.1_1 print_pole_zero_test_x1_1_coef.m
if [ $? -ne 0 ]; then echo "Failed diff -Bb test.ok.1_1"; fail; fi

diff -Bb test.ok.1_2 print_pole_zero_test_x1_2_coef.m
if [ $? -ne 0 ]; then echo "Failed diff -Bb test.ok.1_2"; fail; fi

diff -Bb test.ok.2_1 print_pole_zero_test_x2_1_coef.m
if [ $? -ne 0 ]; then echo "Failed diff -Bb test.ok.2_1"; fail; fi

diff -Bb test.ok.2_2 print_pole_zero_test_x2_2_coef.m
if [ $? -ne 0 ]; then echo "Failed diff -Bb test.ok.2_2"; fail; fi

diff -Bb test.ok.3_1 print_pole_zero_test_x3_1_coef.m
if [ $? -ne 0 ]; then echo "Failed diff -Bb test.ok.3_1"; fail; fi

diff -Bb test.ok.3_2 print_pole_zero_test_x3_2_coef.m
if [ $? -ne 0 ]; then echo "Failed diff -Bb test.ok.3_2"; fail; fi

#
# this much worked
#
pass

