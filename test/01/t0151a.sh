#!/bin/sh

prog=svcasc2cc_test.m

depends="svcasc2cc_test.m test_common.m \
svcasc2cc.m butter2pq.m pq2svcasc.m svcasc2Abcd.m svf.m svcascf.m"

tmp=/tmp/$$
here=`pwd`
if [ $? -ne 0 ]; then echo "Failed pwd"; exit 1; fi

fail()
{
        echo FAILED $prog 1>&2
        cd $here
        rm -rf $tmp
        exit 1
}

pass()
{
        echo PASSED $prog
        cd $here
        rm -rf $tmp
        exit 0
}

trap "fail" 1 2 3 15
mkdir $tmp
if [ $? -ne 0 ]; then echo "Failed mkdir"; exit 1; fi
echo $here
for file in $depends;do \
  cp -R src/$file $tmp; \
  if [ $? -ne 0 ]; then echo "Failed cp "$file; fail; fi \
done
cd $tmp
if [ $? -ne 0 ]; then echo "Failed cd"; fail; fi

#
# the output should look like this
#
cat > test.ok << 'EOF'
EOF
if [ $? -ne 0 ]; then echo "Failed output cat test.ok"; fail; fi
cat > butt21.cc.ok << 'EOF'
// Generated by svcasc2cc.m for the butt21 filter.
// Compile with :
//	"mkoctfile("butt21.cc","-D USING_OCTAVE -Wall")"
//
// This file is linked with Octave and so is a derivative
// work and is subject to the GPLv3 or later. Accordingly
// the following notice applies:
//
// This program is free software; you can redistribute it
// and/or modify it underthe terms of the GNU General Public
// License as published by the Free Software Foundation;
// either version 3 of the License, or (at your option)
// any later version. This program is distributed in the
// hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details. You should
// have received a copy of the GNU General Public License
// along with this program. If not, see:
// <http://www.gnu.org/licenses/>.

#if defined(USING_OCTAVE)

#include <math.h>

#include <octave/oct.h>

typedef double WORD;
typedef double MAC;

void filter_butt21_init(void);
WORD filter_butt21(const WORD u,RowVector &x1,RowVector &x2);

DEFUN_DLD(butt21, args, nargout,"[y,xx1,xx2]=butt21(u)")
{
	// Sanity check
	if (args.length() != 1)
	{
		print_usage();
		return octave_value();
	}

	// Input argument
	int64_t N = args(0).length();
	ColumnVector u = args(0).vector_value();

	// Output arguments
	ColumnVector y(N);
	RowVector x1(11);
	RowVector x2(11);
	Matrix xx1(N,11);
	Matrix xx2(N,11);

	// Call the filter
	filter_butt21_init();
	for(int64_t k=0; k<N; k++)
		{
			y(k) = filter_butt21(u(k),x1,x2);
			xx1.insert(x1,k,0);
			xx2.insert(x2,k,0);
		}

	// Done
	octave_value_list retval(3);
	retval(0)=y;
	retval(1)=xx1;
	retval(2)=xx2;
	return retval;
}

#endif // USING_OCTAVE
static WORD x1_1 = 0;
static WORD x2_1 = 0;
static WORD x1_2 = 0;
static WORD x2_2 = 0;
static WORD x1_3 = 0;
static WORD x2_3 = 0;
static WORD x1_4 = 0;
static WORD x2_4 = 0;
static WORD x1_5 = 0;
static WORD x2_5 = 0;
static WORD x1_6 = 0;
static WORD x2_6 = 0;
static WORD x1_7 = 0;
static WORD x2_7 = 0;
static WORD x1_8 = 0;
static WORD x2_8 = 0;
static WORD x1_9 = 0;
static WORD x2_9 = 0;
static WORD x1_10 = 0;
static WORD x2_10 = 0;
static WORD x1_11 = 0;
static WORD x2_11 = 0;

void filter_butt21_init(void)
{
	x1_1 = 0;
	x2_1 = 0;
	x1_2 = 0;
	x2_2 = 0;
	x1_3 = 0;
	x2_3 = 0;
	x1_4 = 0;
	x2_4 = 0;
	x1_5 = 0;
	x2_5 = 0;
	x1_6 = 0;
	x2_6 = 0;
	x1_7 = 0;
	x2_7 = 0;
	x1_8 = 0;
	x2_8 = 0;
	x1_9 = 0;
	x2_9 = 0;
	x1_10 = 0;
	x2_10 = 0;
	x1_11 = 0;
	x2_11 = 0;
}

static WORD filter_scale_output(MAC mac)
{
	return round(mac/128);
}

WORD filter_butt21(const WORD u,RowVector &x1,RowVector &x2)
{
	static const WORD a11_1 = 0;
	static const WORD a12_1 = 128;
	static const WORD a21_1 = -117;
	static const WORD a22_1 = 198;
	static const WORD b1_1  = 0;
	static const WORD b2_1  = 128;
	static const WORD c1_1  = 1;
	static const WORD c2_1  = 42;
	static const WORD d_1   = 12;
	static const WORD a11_2 = 0;
	static const WORD a12_2 = 128;
	static const WORD a21_2 = -98;
	static const WORD a22_2 = 183;
	static const WORD b1_2  = 0;
	static const WORD b2_2  = 128;
	static const WORD c1_2  = 3;
	static const WORD c2_2  = 37;
	static const WORD d_2   = 11;
	static const WORD a11_3 = 0;
	static const WORD a12_3 = 128;
	static const WORD a21_3 = -83;
	static const WORD a22_3 = 170;
	static const WORD b1_3  = 0;
	static const WORD b2_3  = 128;
	static const WORD c1_3  = 4;
	static const WORD c2_3  = 34;
	static const WORD d_3   = 10;
	static const WORD a11_4 = 0;
	static const WORD a12_4 = 128;
	static const WORD a21_4 = -70;
	static const WORD a22_4 = 160;
	static const WORD b1_4  = 0;
	static const WORD b2_4  = 128;
	static const WORD c1_4  = 4;
	static const WORD c2_4  = 31;
	static const WORD d_4   = 9;
	static const WORD a11_5 = 0;
	static const WORD a12_5 = 128;
	static const WORD a21_5 = -59;
	static const WORD a22_5 = 152;
	static const WORD b1_5  = 0;
	static const WORD b2_5  = 128;
	static const WORD c1_5  = 5;
	static const WORD c2_5  = 28;
	static const WORD d_5   = 9;
	static const WORD a11_6 = 0;
	static const WORD a12_6 = 128;
	static const WORD a21_6 = -51;
	static const WORD a22_6 = 145;
	static const WORD b1_6  = 0;
	static const WORD b2_6  = 128;
	static const WORD c1_6  = 5;
	static const WORD c2_6  = 27;
	static const WORD d_6   = 9;
	static const WORD a11_7 = 0;
	static const WORD a12_7 = 128;
	static const WORD a21_7 = -44;
	static const WORD a22_7 = 139;
	static const WORD b1_7  = 0;
	static const WORD b2_7  = 128;
	static const WORD c1_7  = 5;
	static const WORD c2_7  = 25;
	static const WORD d_7   = 8;
	static const WORD a11_8 = 0;
	static const WORD a12_8 = 128;
	static const WORD a21_8 = -39;
	static const WORD a22_8 = 135;
	static const WORD b1_8  = 0;
	static const WORD b2_8  = 128;
	static const WORD c1_8  = 6;
	static const WORD c2_8  = 24;
	static const WORD d_8   = 8;
	static const WORD a11_9 = 0;
	static const WORD a12_9 = 128;
	static const WORD a21_9 = -36;
	static const WORD a22_9 = 133;
	static const WORD b1_9  = 0;
	static const WORD b2_9  = 128;
	static const WORD c1_9  = 6;
	static const WORD c2_9  = 24;
	static const WORD d_9   = 8;
	static const WORD a11_10 = 0;
	static const WORD a12_10 = 128;
	static const WORD a21_10 = -34;
	static const WORD a22_10 = 131;
	static const WORD b1_10  = 0;
	static const WORD b2_10  = 128;
	static const WORD c1_10  = 6;
	static const WORD c2_10  = 23;
	static const WORD d_10   = 8;
	static const WORD a11_11 = 0;
	static const WORD a12_11 = 128;
	static const WORD a21_11 = 0;
	static const WORD a22_11 = 65;
	static const WORD b1_11  = 0;
	static const WORD b2_11  = 128;
	static const WORD c1_11  = 0;
	static const WORD c2_11  = 47;
	static const WORD d_11   = 31;
	WORD x1_1tmp;
	WORD x2_1tmp;
	WORD x1_2tmp;
	WORD x2_2tmp;
	WORD x1_3tmp;
	WORD x2_3tmp;
	WORD x1_4tmp;
	WORD x2_4tmp;
	WORD x1_5tmp;
	WORD x2_5tmp;
	WORD x1_6tmp;
	WORD x2_6tmp;
	WORD x1_7tmp;
	WORD x2_7tmp;
	WORD x1_8tmp;
	WORD x2_8tmp;
	WORD x1_9tmp;
	WORD x2_9tmp;
	WORD x1_10tmp;
	WORD x2_10tmp;
	WORD x1_11tmp;
	WORD x2_11tmp;
	WORD y_0;
	WORD y_1;
	WORD y_2;
	WORD y_3;
	WORD y_4;
	WORD y_5;
	WORD y_6;
	WORD y_7;
	WORD y_8;
	WORD y_9;
	WORD y_10;
	WORD y_11;
	WORD y;
	MAC mac;

	// Set section 1 input
	y_0 = u;

	// Calculate section 1 output
	mac = 0;
	mac += c1_1*x1_1;
	mac += c2_1*x2_1;
	mac += d_1*y_0;
	y_1 = filter_scale_output(mac);

	// Calculate section 2 output
	mac = 0;
	mac += c1_2*x1_2;
	mac += c2_2*x2_2;
	mac += d_2*y_1;
	y_2 = filter_scale_output(mac);

	// Calculate section 3 output
	mac = 0;
	mac += c1_3*x1_3;
	mac += c2_3*x2_3;
	mac += d_3*y_2;
	y_3 = filter_scale_output(mac);

	// Calculate section 4 output
	mac = 0;
	mac += c1_4*x1_4;
	mac += c2_4*x2_4;
	mac += d_4*y_3;
	y_4 = filter_scale_output(mac);

	// Calculate section 5 output
	mac = 0;
	mac += c1_5*x1_5;
	mac += c2_5*x2_5;
	mac += d_5*y_4;
	y_5 = filter_scale_output(mac);

	// Calculate section 6 output
	mac = 0;
	mac += c1_6*x1_6;
	mac += c2_6*x2_6;
	mac += d_6*y_5;
	y_6 = filter_scale_output(mac);

	// Calculate section 7 output
	mac = 0;
	mac += c1_7*x1_7;
	mac += c2_7*x2_7;
	mac += d_7*y_6;
	y_7 = filter_scale_output(mac);

	// Calculate section 8 output
	mac = 0;
	mac += c1_8*x1_8;
	mac += c2_8*x2_8;
	mac += d_8*y_7;
	y_8 = filter_scale_output(mac);

	// Calculate section 9 output
	mac = 0;
	mac += c1_9*x1_9;
	mac += c2_9*x2_9;
	mac += d_9*y_8;
	y_9 = filter_scale_output(mac);

	// Calculate section 10 output
	mac = 0;
	mac += c1_10*x1_10;
	mac += c2_10*x2_10;
	mac += d_10*y_9;
	y_10 = filter_scale_output(mac);

	// Calculate section 11 output
	mac = 0;
	mac += c1_11*x1_11;
	mac += c2_11*x2_11;
	mac += d_11*y_10;
	y_11 = filter_scale_output(mac);

	// Set the filter output
	y = y_11;


	// Set the state for section 1
	x1_1tmp = x1_1;
	x2_1tmp = x2_1;
	mac = 0;
	mac += a11_1*x1_1tmp;
	mac += a12_1*x2_1tmp;
	mac += b1_1*y_0;
	x1_1 = filter_scale_output(mac);
	mac = 0;
	mac += a21_1*x1_1tmp;
	mac += a22_1*x2_1tmp;
	mac += b2_1*y_0;
	x2_1 = filter_scale_output(mac);

	// Set the state for section 2
	x1_2tmp = x1_2;
	x2_2tmp = x2_2;
	mac = 0;
	mac += a11_2*x1_2tmp;
	mac += a12_2*x2_2tmp;
	mac += b1_2*y_1;
	x1_2 = filter_scale_output(mac);
	mac = 0;
	mac += a21_2*x1_2tmp;
	mac += a22_2*x2_2tmp;
	mac += b2_2*y_1;
	x2_2 = filter_scale_output(mac);

	// Set the state for section 3
	x1_3tmp = x1_3;
	x2_3tmp = x2_3;
	mac = 0;
	mac += a11_3*x1_3tmp;
	mac += a12_3*x2_3tmp;
	mac += b1_3*y_2;
	x1_3 = filter_scale_output(mac);
	mac = 0;
	mac += a21_3*x1_3tmp;
	mac += a22_3*x2_3tmp;
	mac += b2_3*y_2;
	x2_3 = filter_scale_output(mac);

	// Set the state for section 4
	x1_4tmp = x1_4;
	x2_4tmp = x2_4;
	mac = 0;
	mac += a11_4*x1_4tmp;
	mac += a12_4*x2_4tmp;
	mac += b1_4*y_3;
	x1_4 = filter_scale_output(mac);
	mac = 0;
	mac += a21_4*x1_4tmp;
	mac += a22_4*x2_4tmp;
	mac += b2_4*y_3;
	x2_4 = filter_scale_output(mac);

	// Set the state for section 5
	x1_5tmp = x1_5;
	x2_5tmp = x2_5;
	mac = 0;
	mac += a11_5*x1_5tmp;
	mac += a12_5*x2_5tmp;
	mac += b1_5*y_4;
	x1_5 = filter_scale_output(mac);
	mac = 0;
	mac += a21_5*x1_5tmp;
	mac += a22_5*x2_5tmp;
	mac += b2_5*y_4;
	x2_5 = filter_scale_output(mac);

	// Set the state for section 6
	x1_6tmp = x1_6;
	x2_6tmp = x2_6;
	mac = 0;
	mac += a11_6*x1_6tmp;
	mac += a12_6*x2_6tmp;
	mac += b1_6*y_5;
	x1_6 = filter_scale_output(mac);
	mac = 0;
	mac += a21_6*x1_6tmp;
	mac += a22_6*x2_6tmp;
	mac += b2_6*y_5;
	x2_6 = filter_scale_output(mac);

	// Set the state for section 7
	x1_7tmp = x1_7;
	x2_7tmp = x2_7;
	mac = 0;
	mac += a11_7*x1_7tmp;
	mac += a12_7*x2_7tmp;
	mac += b1_7*y_6;
	x1_7 = filter_scale_output(mac);
	mac = 0;
	mac += a21_7*x1_7tmp;
	mac += a22_7*x2_7tmp;
	mac += b2_7*y_6;
	x2_7 = filter_scale_output(mac);

	// Set the state for section 8
	x1_8tmp = x1_8;
	x2_8tmp = x2_8;
	mac = 0;
	mac += a11_8*x1_8tmp;
	mac += a12_8*x2_8tmp;
	mac += b1_8*y_7;
	x1_8 = filter_scale_output(mac);
	mac = 0;
	mac += a21_8*x1_8tmp;
	mac += a22_8*x2_8tmp;
	mac += b2_8*y_7;
	x2_8 = filter_scale_output(mac);

	// Set the state for section 9
	x1_9tmp = x1_9;
	x2_9tmp = x2_9;
	mac = 0;
	mac += a11_9*x1_9tmp;
	mac += a12_9*x2_9tmp;
	mac += b1_9*y_8;
	x1_9 = filter_scale_output(mac);
	mac = 0;
	mac += a21_9*x1_9tmp;
	mac += a22_9*x2_9tmp;
	mac += b2_9*y_8;
	x2_9 = filter_scale_output(mac);

	// Set the state for section 10
	x1_10tmp = x1_10;
	x2_10tmp = x2_10;
	mac = 0;
	mac += a11_10*x1_10tmp;
	mac += a12_10*x2_10tmp;
	mac += b1_10*y_9;
	x1_10 = filter_scale_output(mac);
	mac = 0;
	mac += a21_10*x1_10tmp;
	mac += a22_10*x2_10tmp;
	mac += b2_10*y_9;
	x2_10 = filter_scale_output(mac);

	// Set the state for section 11
	x1_11tmp = x1_11;
	x2_11tmp = x2_11;
	mac = 0;
	mac += a11_11*x1_11tmp;
	mac += a12_11*x2_11tmp;
	mac += b1_11*y_10;
	x1_11 = filter_scale_output(mac);
	mac = 0;
	mac += a21_11*x1_11tmp;
	mac += a22_11*x2_11tmp;
	mac += b2_11*y_10;
	x2_11 = filter_scale_output(mac);

	// Set the returned state for each section
	x1(0) = x1_1;
	x2(0) = x2_1;
	x1(1) = x1_2;
	x2(1) = x2_2;
	x1(2) = x1_3;
	x2(2) = x2_3;
	x1(3) = x1_4;
	x2(3) = x2_4;
	x1(4) = x1_5;
	x2(4) = x2_5;
	x1(5) = x1_6;
	x2(5) = x2_6;
	x1(6) = x1_7;
	x2(6) = x2_7;
	x1(7) = x1_8;
	x2(7) = x2_8;
	x1(8) = x1_9;
	x2(8) = x2_9;
	x1(9) = x1_10;
	x2(9) = x2_10;
	x1(10) = x1_11;
	x2(10) = x2_11;

	// Done
	return(y);
}
EOF
if [ $? -ne 0 ]; then echo "Failed output cat butt21.cc"; fail; fi

#
# run and see if the results match
#
echo "Running octave-cli -q " $prog

octave-cli -q $prog > test.out
if [ $? -ne 0 ]; then echo "Failed running $prog"; fail; fi

diff -Bb test.ok test.out
if [ $? -ne 0 ]; then echo "Failed diff -Bb of test.out"; fail; fi
diff -Bb butt21.cc.ok butt21.cc
if [ $? -ne 0 ]; then echo "Failed diff -Bb of butt21.cc"; fail; fi


#
# this much worked
#
pass

