% schurOneMPAlatticeDoublyPipelinedDelay_kyp_Dinh_lowpass_test.m
% Copyright (C) 2024-2025 Robert G. Jenssen
%
% Design a Schur one-multiplier all-pass filter with the Finsler
% transformation of the KYP lemma and the BMI convex over-approximation
% of Dinh et al.. See: "Combining Convexâ€“Concave Decompositions and
% Linearization Approaches for Solving BMIs, With Application to Static Output
% Feedback", July, 2011. Available at:
%   https://set.kuleuven.be/optec/Software/softwarefiles/bmipaper
%
% N    rows(A)     rows(F)
%    2*((N+DD)+2)  3*rows(A)+3
% 4      18          57
% 5      22          69
% 6      26          81
% 7      30          93
% 8      34         105

test_common;

strf="schurOneMPAlatticeDoublyPipelinedDelay_kyp_Dinh_lowpass_test";

delete(strcat(strf,".diary"));
delete(strcat(strf,".diary.tmp"));
eval(sprintf("diary %s.diary.tmp",strf));

tic;

schurOneMPAlatticeDoublyPipelinedDelay_kyp_lowpass_common_start;

use_best_k_found=true
use_hessEsq=true
maxiter_kyp=50;

if ~use_best_k_found
  maxiter_succ_approx=maxiter_kyp;
else
  maxiter_succ_approx=0;
  printf("\n\nUsing best k found!\n\n");

% 10*log10(min(Asq))(pass)=-0.130303,10*log10(max(Asq))(stop)=-42.7989
Esq=2.92162e-06
gradEsq = [ -7.2198e-05, -7.28907e-05, 3.27587e-05, 1.83675e-05, ... 
            -3.63181e-05 ];
diagHessEsq = [ 0.0224086, 0.0342737, 0.0345256, 0.0325263, ... 
                0.0398205 ];
Da0 = [   1.0000000000,  -0.7135065959,   0.2321721382,   0.1490500249, ... 
          0.0712710757,   0.0216280074 ]';
k0 = [  -0.5887890122,   0.3794825489,   0.2077136416,   0.0867433777, ... 
         0.0216280074 ];
k = [  -0.5587865811,   0.4149916911,   0.2259884090,   0.0921483938, ... 
        0.0177132903 ];
list_Objective = ...
  [   0.0000361814,   0.0000314886,   0.0000276622,   0.0000243755, ... 
      0.0000217294,   0.0000193563,   0.0000172871,   0.0000154617, ... 
      0.0000138517,   0.0000124065,   0.0000111631,   0.0000100610, ... 
      0.0000090909,   0.0000083387,   0.0000075617,   0.0000068863, ... 
      0.0000067189,   0.0000062382,   0.0000058286,   0.0000054690, ... 
      0.0000051578,   0.0000048958,   0.0000046860,   0.0000045176, ... 
      0.0000042046,   0.0000039785,   0.0000038144,   0.0000036487, ... 
      0.0000035451,   0.0000034684,   0.0000034047,   0.0000033669, ... 
      0.0000033465,   0.0000033294,   0.0000032347,   0.0000031786, ... 
      0.0000031452,   0.0000031095,   0.0000030784,   0.0000030426, ... 
      0.0000030152,   0.0000031107,   0.0000030735,   0.0000030437, ... 
      0.0000030213,   0.0000030513,   0.0000029714,   0.0000029613, ... 
      0.0000029293,   0.0000029489 ]';
list_norm_dz = ...
  [   0.0346260994,   0.0320345302,   0.0340307451,   0.0409361182, ... 
      0.0427077632,   0.0246738811,   0.0218864150,   0.0187042692, ... 
      0.0170201666,   0.0242174009,   0.0351227195,   0.0355517266, ... 
      0.0350644483,   0.2989748781,   0.2342890558,   0.1916446947, ... 
      0.5111212526,   0.3986705645,   0.3285455379,   0.2812851733, ... 
      0.2467192551,   0.2170890576,   0.2035870031,   0.2030239103, ... 
      0.0471735119,   0.0375138522,   0.0397881803,   0.0469213673, ... 
      0.0379238449,   0.0883509890,   0.0433087119,   0.0517825305, ... 
      0.0747929055,   0.1403831916,   0.0178941215,   0.0632044255, ... 
      0.0898002570,   0.0719220833,   0.0642926652,   0.0641789244, ... 
      0.0758301529,   0.3301758064,   0.2923060725,   0.2644135699, ... 
      0.2467062015,   0.3103330799,   0.1880625883,   0.1649581218, ... 
      0.1010875576,   0.1652568824 ]';
list_norm_dk = ...
  [   0.0037551611,   0.0029890038,   0.0026366507,   0.0025149221, ... 
      0.0020933457,   0.0021249002,   0.0020400189,   0.0019838420, ... 
      0.0019310680,   0.0019380480,   0.0018149508,   0.0017569814, ... 
      0.0017122144,   0.0016769788,   0.0016133276,   0.0015693274, ... 
      0.0010395819,   0.0010421819,   0.0010625579,   0.0010542978, ... 
      0.0010029359,   0.0009100587,   0.0007959148,   0.0006930227, ... 
      0.0013185245,   0.0011141522,   0.0008532544,   0.0009690588, ... 
      0.0006262814,   0.0005478504,   0.0004045261,   0.0002995904, ... 
      0.0002153725,   0.0002614967,   0.0005762583,   0.0004921942, ... 
      0.0003396180,   0.0003122639,   0.0003036307,   0.0003554394, ... 
      0.0003120175,   0.0001933759,   0.0001866303,   0.0001887093, ... 
      0.0001850680,   0.0001509422,   0.0002078187,   0.0001141087, ... 
      0.0001798037,   0.0001779834 ]';
list_Esq = ...
  [   0.0000361720,   0.0000314789,   0.0000276481,   0.0000243553, ... 
      0.0000217080,   0.0000193473,   0.0000172798,   0.0000154561, ... 
      0.0000138469,   0.0000123989,   0.0000111493,   0.0000100471, ... 
      0.0000090775,   0.0000082484,   0.0000075060,   0.0000068489, ... 
      0.0000064567,   0.0000060790,   0.0000057205,   0.0000053897, ... 
      0.0000050968,   0.0000048486,   0.0000046445,   0.0000044764, ... 
      0.0000042022,   0.0000039769,   0.0000038128,   0.0000036464, ... 
      0.0000035436,   0.0000034606,   0.0000034029,   0.0000033642, ... 
      0.0000033409,   0.0000033096,   0.0000032343,   0.0000031746, ... 
      0.0000031371,   0.0000031043,   0.0000030743,   0.0000030385, ... 
      0.0000030094,   0.0000030017,   0.0000029880,   0.0000029738, ... 
      0.0000029605,   0.0000029550,   0.0000029361,   0.0000029341, ... 
      0.0000029191,   0.0000029216 ]';
list_Esq_p = ...
  [   0.1181879699,   0.1155082950,   0.1126140445,   0.1095824517, ... 
      0.1064430602,   0.1033420835,   0.1002521919,   0.0971800302, ... 
      0.0941654867,   0.0912109642,   0.0883069383,   0.0854503098, ... 
      0.0826558090,   0.0800272721,   0.0774274305,   0.0748787156, ... 
      0.0724319236,   0.0700685102,   0.0677881103,   0.0655883621, ... 
      0.0634651882,   0.0614175780,   0.0594440453,   0.0575426705, ... 
      0.0556329118,   0.0537905853,   0.0519584387,   0.0501126518, ... 
      0.0484088801,   0.0468268349,   0.0452951691,   0.0438190617, ... 
      0.0423969085,   0.0410423648,   0.0397403024,   0.0384928823, ... 
      0.0373248804,   0.0362250715,   0.0351916092,   0.0342188297, ... 
      0.0332939225,   0.0324090377,   0.0315555272,   0.0307356623, ... 
      0.0299500791,   0.0291956323,   0.0284771926,   0.0277949751, ... 
      0.0271520433,   0.0266335333 ]';
list_Esq_s = ...
  [   0.0000598085,   0.0000595773,   0.0000593323,   0.0000592848, ... 
      0.0000589130,   0.0000586008,   0.0000582844,   0.0000579539, ... 
      0.0000576143,   0.0000573398,   0.0000569446,   0.0000564584, ... 
      0.0000559362,   0.0000554604,   0.0000549907,   0.0000545281, ... 
      0.0000536888,   0.0000528808,   0.0000521119,   0.0000513788, ... 
      0.0000506685,   0.0000499690,   0.0000492623,   0.0000485416, ... 
      0.0000480934,   0.0000476603,   0.0000471201,   0.0000466577, ... 
      0.0000461125,   0.0000455649,   0.0000450036,   0.0000444413, ... 
      0.0000438755,   0.0000433214,   0.0000428398,   0.0000423823, ... 
      0.0000419181,   0.0000414663,   0.0000410405,   0.0000406520, ... 
      0.0000402760,   0.0000398889,   0.0000395059,   0.0000391339, ... 
      0.0000387776,   0.0000384317,   0.0000381005,   0.0000377492, ... 
      0.0000374280,   0.0000371248 ]';
list_Asq_min = ...
  [   0.8866197336,   0.8931873428,   0.8990499227,   0.9045778728, ... 
      0.9092208396,   0.9137514909,   0.9179853055,   0.9219793226, ... 
      0.9257500610,   0.9294028413,   0.9326707417,   0.9357829368, ... 
      0.9387411085,   0.9415514360,   0.9442009711,   0.9467120816, ... 
      0.9481031276,   0.9496682467,   0.9512632965,   0.9528256211, ... 
      0.9542859106,   0.9555847236,   0.9566988476,   0.9576532445, ... 
      0.9594480876,   0.9609462389,   0.9620497640,   0.9632834229, ... 
      0.9640573335,   0.9647231443,   0.9651982421,   0.9655331699, ... 
      0.9657469173,   0.9660305727,   0.9667112931,   0.9672813673, ... 
      0.9676650908,   0.9680091205,   0.9683386797,   0.9687241895, ... 
      0.9690602082,   0.9692228716,   0.9693964124,   0.9695769720, ... 
      0.9697562229,   0.9698782639,   0.9700812612,   0.9701556375, ... 
      0.9703318425,   0.9704422489 ]';
list_Asq_max = ...
  [   0.0000359048,   0.0000383032,   0.0000459209,   0.0000524833, ... 
      0.0000498896,   0.0000517409,   0.0000523440,   0.0000525535, ... 
      0.0000524422,   0.0000529054,   0.0000489052,   0.0000458342, ... 
      0.0000438386,   0.0000454420,   0.0000451543,   0.0000445495, ... 
      0.0000482768,   0.0000491678,   0.0000496155,   0.0000500262, ... 
      0.0000504994,   0.0000509983,   0.0000515686,   0.0000521400, ... 
      0.0000505968,   0.0000514228,   0.0000532227,   0.0000536223, ... 
      0.0000546262,   0.0000549213,   0.0000551036,   0.0000549484, ... 
      0.0000546239,   0.0000545388,   0.0000550811,   0.0000553264, ... 
      0.0000553274,   0.0000552502,   0.0000550497,   0.0000549902, ... 
      0.0000549093,   0.0000543531,   0.0000541950,   0.0000540444, ... 
      0.0000538464,   0.0000534013,   0.0000536043,   0.0000533254, ... 
      0.0000533420,   0.0000524945 ]';
list_k{1} = ...
  [  -0.5873320885,   0.3808224746,   0.2107296158,   0.0870720440, ... 
     0.0206385199 ];
list_k{2} = ...
  [  -0.5857513275,   0.3822484997,   0.2128137770,   0.0872165462, ... 
     0.0204456922 ];
list_k{3} = ...
  [  -0.5842502973,   0.3837354587,   0.2143897483,   0.0872076720, ... 
     0.0205091279 ];
list_k{4} = ...
  [  -0.5827739794,   0.3852752844,   0.2157209134,   0.0871867757, ... 
     0.0204664849 ];
list_k{5} = ...
  [  -0.5814061841,   0.3867241642,   0.2163303474,   0.0873415956, ... 
     0.0205953284 ];
list_k{6} = ...
  [  -0.5801042342,   0.3881727750,   0.2171711911,   0.0874603307, ... 
     0.0205721371 ];
list_k{7} = ...
  [  -0.5788499921,   0.3896064184,   0.2178843770,   0.0876142174, ... 
     0.0205420426 ];
list_k{8} = ...
  [  -0.5776444312,   0.3910229494,   0.2185493174,   0.0877940435, ... 
     0.0205072789 ];
list_k{9} = ...
  [  -0.5764818174,   0.3924197751,   0.2191723003,   0.0879845171, ... 
     0.0204643498 ];
list_k{10} = ...
  [  -0.5753502865,   0.3938373952,   0.2198183529,   0.0881893079, ... 
     0.0203825070 ];
list_k{11} = ...
  [  -0.5742711322,   0.3952434898,   0.2201656218,   0.0883579025, ... 
     0.0203246232 ];
list_k{12} = ...
  [  -0.5732118906,   0.3965814346,   0.2205390868,   0.0885421004, ... 
     0.0202860277 ];
list_k{13} = ...
  [  -0.5721888744,   0.3978785635,   0.2209469061,   0.0887241425, ... 
     0.0202302015 ];
list_k{14} = ...
  [  -0.5712538923,   0.3990992717,   0.2215831703,   0.0888976783, ... 
     0.0201162238 ];
list_k{15} = ...
  [  -0.5703225690,   0.4003026429,   0.2220801597,   0.0890868410, ... 
     0.0200485504 ];
list_k{16} = ...
  [  -0.5694089518,   0.4014778050,   0.2225378111,   0.0892694728, ... 
     0.0199830754 ];
list_k{17} = ...
  [  -0.5687778728,   0.4022694481,   0.2223236898,   0.0893517762, ... 
     0.0200391938 ];
list_k{18} = ...
  [  -0.5681491550,   0.4030784438,   0.2224724527,   0.0894480340, ... 
     0.0199685737 ];
list_k{19} = ...
  [  -0.5675087500,   0.4038809741,   0.2227114423,   0.0895501720, ... 
     0.0198830883 ];
list_k{20} = ...
  [  -0.5668676614,   0.4046646591,   0.2229731349,   0.0896486179, ... 
     0.0197924652 ];
list_k{21} = ...
  [  -0.5662515579,   0.4054062188,   0.2232182413,   0.0897386816, ... 
     0.0197019255 ];
list_k{22} = ...
  [  -0.5656894929,   0.4060808559,   0.2234256724,   0.0898198524, ... 
     0.0196151028 ];
list_k{23} = ...
  [  -0.5651967858,   0.4066744367,   0.2235883260,   0.0898963084, ... 
     0.0195371266 ];
list_k{24} = ...
  [  -0.5647690247,   0.4071937062,   0.2237209118,   0.0899696000, ... 
     0.0194685015 ];
list_k{25} = ...
  [  -0.5640052831,   0.4080548489,   0.2243382863,   0.0900595920, ... 
     0.0193123313 ];
list_k{26} = ...
  [  -0.5632878378,   0.4088403812,   0.2246410994,   0.0901285162, ... 
     0.0191978758 ];
list_k{27} = ...
  [  -0.5627194063,   0.4094598197,   0.2247486119,   0.0901901837, ... 
     0.0191213078 ];
list_k{28} = ...
  [  -0.5620973250,   0.4101574403,   0.2249637590,   0.0902397992, ... 
     0.0189922133 ];
list_k{29} = ...
  [  -0.5616942286,   0.4106198234,   0.2250364294,   0.0903076650, ... 
     0.0189143877 ];
list_k{30} = ...
  [  -0.5613580699,   0.4110287067,   0.2251209923,   0.0903799576, ... 
     0.0188273552 ];
list_k{31} = ...
  [  -0.5611274809,   0.4113381431,   0.2251669734,   0.0904669704, ... 
     0.0187564069 ];
list_k{32} = ...
  [  -0.5609825047,   0.4115694834,   0.2252049157,   0.0905661301, ... 
     0.0186935921 ];
list_k{33} = ...
  [  -0.5609099572,   0.4117314427,   0.2252310130,   0.0906738038, ... 
     0.0186424388 ];
list_k{34} = ...
  [  -0.5607942706,   0.4119334773,   0.2252633025,   0.0907769454, ... 
     0.0185924550 ];
list_k{35} = ...
  [  -0.5604328850,   0.4123603987,   0.2253492801,   0.0908459860, ... 
     0.0185084707 ];
list_k{36} = ...
  [  -0.5601294783,   0.4127220473,   0.2254228260,   0.0909193833, ... 
     0.0184156612 ];
list_k{37} = ...
  [  -0.5599414120,   0.4129742125,   0.2254808730,   0.0910084278, ... 
     0.0183443462 ];
list_k{38} = ...
  [  -0.5597764468,   0.4132096217,   0.2255276705,   0.0910983762, ... 
     0.0182765453 ];
list_k{39} = ...
  [  -0.5596216835,   0.4134374873,   0.2255777662,   0.0911920193, ... 
     0.0182055621 ];
list_k{40} = ...
  [  -0.5594227126,   0.4137043932,   0.2256175222,   0.0912758259, ... 
     0.0181224667 ];
list_k{41} = ...
  [  -0.5592554953,   0.4139357672,   0.2256624262,   0.0913664877, ... 
     0.0180474767 ];
list_k{42} = ...
  [  -0.5592176306,   0.4140457823,   0.2257377566,   0.0914907724, ... 
     0.0179951717 ];
list_k{43} = ...
  [  -0.5591521780,   0.4141844711,   0.2257542385,   0.0915861220, ... 
     0.0179510238 ];
list_k{44} = ...
  [  -0.5590792527,   0.4143275851,   0.2257708269,   0.0916733683, ... 
     0.0179071556 ];
list_k{45} = ...
  [  -0.5590073494,   0.4144667422,   0.2257950947,   0.0917582581, ... 
     0.0178633357 ];
list_k{46} = ...
  [  -0.5589817122,   0.4145621507,   0.2258399733,   0.0918561516, ... 
     0.0178255697 ];
list_k{47} = ...
  [  -0.5588740579,   0.4147265993,   0.2258254003,   0.0919107680, ... 
     0.0177886848 ];
list_k{48} = ...
  [  -0.5588734933,   0.4147907392,   0.2258604609,   0.0919969558, ... 
     0.0177729060 ];
list_k{49} = ...
  [  -0.5587820214,   0.4149319245,   0.2258568786,   0.0920465088, ... 
     0.0177334012 ];
list_k{50} = ...
  [  -0.5587865811,   0.4149916911,   0.2259884090,   0.0921483938, ... 
     0.0177132903 ];
endif

for m=1:maxiter_succ_approx,

  % Constant part of the pass band constraint matrix
  Lzm_p=kron(Phi,P_p)+kron(Psi_p,Q_p);
  Uzm_p=[[-eye(n),A,B,zeros(n,1)]; ...
         [zeros(1,n),C_p,D,-1]];
  Vzm_p=[[XYZ_p,zeros((2*n)+1,1)]; ...
         [zeros(1,n),1]];
  VplusUzm_p=(Uzm_p+(Vzm_p'))/sqrt(2);
  UminusVzm_p=(Uzm_p-(Vzm_p'))/sqrt(2);
  Fzm_p=[[[[Lzm_p,zeros(2*n,2)]; ...
           [zeros(1,2*n),-Esq_p,0]; ...
           [zeros(1,(2*n)+1),1]],(VplusUzm_p')]; ...
         [VplusUzm_p,-eye(n+1)]] - ...
        [[(UminusVzm_p')*UminusVzm_p,zeros(2*(n+1),n+1)]; ...
         [zeros(n+1,2*(n+1)),zeros(n+1)]];

  % Linear part of the pass band constraint matrix
  gLzm_p=zeros(size(Lzm_p));
  gUzm_p=[[zeros(n),dA,zeros(n,1),zeros(n,1)]; ...
          [zeros(1,n),zeros(1,n),0,0]];
  gVzm_p=[[dXYZ_p,zeros((2*n)+1,1)]; ...
          [zeros(1,n),0]];
  gVplusUzm_p=(gUzm_p+(gVzm_p'))/sqrt(2);
  gUminusVzm_p=(gUzm_p-(gVzm_p'))/sqrt(2);
  gFzm_p=[[[[gLzm_p,zeros(2*n,2)]; ...
            [zeros(1,2*n),-dEsq_p,0]; ...
            [zeros(1,(2*n)+1),0]],(gVplusUzm_p')]; ...
          [gVplusUzm_p,zeros(n+1)]] - ...
         [[(gUminusVzm_p')*UminusVzm_p,zeros(2*(n+1),n+1)]; ...
          [zeros(n+1,2*(n+1)),zeros(n+1)]] - ...
         [[(UminusVzm_p')*gUminusVzm_p,zeros(2*(n+1),n+1)]; ...
          [zeros(n+1,2*(n+1)),zeros(n+1)]];

  % Construct pass band constraint matrix
  bFzm_p=Fzm_p+gFzm_p;

  % Constant part of the stop band constraint matrix
  Lzm_s=kron(Phi,P_s)+kron(Psi_s,Q_s);
  Uzm_s=[[-eye(n),A,B,zeros(n,1)]; ...
         [zeros(1,n),C_s,D,-1]];
  Vzm_s=[[XYZ_s,zeros((2*n)+1,1)]; ...
         [zeros(1,n),1]];
  VplusUzm_s=(Uzm_s+(Vzm_s'))/sqrt(2);
  UminusVzm_s=(Uzm_s-(Vzm_s'))/sqrt(2);
  Fzm_s=[[[[Lzm_s,zeros(2*n,2)]; ...
           [zeros(1,2*n),-Esq_s,0]; ...
           [zeros(1,(2*n)+1),1]],(VplusUzm_s')]; ...
         [VplusUzm_s,-eye(n+1)]] - ...
        [[(UminusVzm_s')*UminusVzm_s,zeros(2*(n+1),n+1)]; ...
         [zeros(n+1,2*(n+1)),zeros(n+1)]];

  % Linear part of the stop band constraint matrix
  gLzm_s=zeros(size(Lzm_s));
  gUzm_s=[[zeros(n),dA,zeros(n,1),zeros(n,1)]; ...
          [zeros(1,n),zeros(1,n),0,0]];
  gVzm_s=[[dXYZ_s,zeros((2*n)+1,1)]; ...
          [zeros(1,n),0]];
  gVplusUzm_s=(gUzm_s+(gVzm_s'))/sqrt(2);
  gUminusVzm_s=(gUzm_s-(gVzm_s'))/sqrt(2);
  gFzm_s=[[[[gLzm_s,zeros(2*n,2)]; ...
            [zeros(1,2*n),-dEsq_s,0]; ...
            [zeros(1,(2*n)+1),0]],(gVplusUzm_s')]; ...
          [gVplusUzm_s,zeros(n+1)]] - ...
         [[(gUminusVzm_s')*UminusVzm_s,zeros(2*(n+1),n+1)]; ...
          [zeros(n+1,2*(n+1)),zeros(n+1)]] - ...
         [[(UminusVzm_s')*gUminusVzm_s,zeros(2*(n+1),n+1)]; ...
          [zeros(n+1,2*(n+1)),zeros(n+1)]];

  % Construct stop band constraint matrix
  bFzm_s=Fzm_s+gFzm_s;
  
  if m==1,
    printf("rows(Lzm_p)=%d\n",rows(Lzm_p));
    printf("rows(Fzm_p)=%d\n",rows(Fzm_p));
    printf("rows(Lzm_s)=%d\n",rows(Lzm_s));
    printf("rows(Fzm_s)=%d\n",rows(Fzm_s));
  endif

  % Define objective function
  if use_hessEsq
    Esqkdk=Esq+(gradEsq(1:N)*(dk'))+(dk*hessEsq(1:N,1:N)*(dk')/2);
  else
    Esqkdk=Esq+(gradEsq(1:N)*(dk'));
  endif

  % Solve for the SDP variables
  rho=10^floor(log10(Esq));
  printf("Using rho=%g,Esq=%g,Esq_p=%g,Esq_s=%g\n",rho,Esq,Esq_p,Esq_s);
  ctol=1e-5;
  Constraints=[ -k_max<=(k+dk)<=k_max, ...
                dEsq_p<=0,       dEsq_s<=0, ...
                Esq_p+dEsq_p>=0, Esq_s+dEsq_s>=0, ...
                bFzm_p<=ctol,    Q_p>=0, ...
                bFzm_s<=ctol,    Q_s>=0 ];
  Objective=real(Esqkdk + (rho*norm(dz)^2));
  Options=sdpsettings("solver","sdpt3","maxit",100,"gaptol",tol);
  sol=optimize(Constraints,Objective,Options)
  if sol.problem
    error("YALMIP failed");
  endif

  % Sanity checks
  check(Constraints)
  
  schurOneMPAlatticeDoublyPipelinedDelay_kyp_lowpass_common_update;

  % Exit criterion
  if norm(value(dk)) < tol
    break;
  elseif m==maxiter_kyp
    warning("Exiting at maxiter_kyp!");
    break;
  endif

endfor
 
schurOneMPAlatticeDoublyPipelinedDelay_kyp_lowpass_common_finish;

% Done
toc
diary off
movefile(strcat(strf,".diary.tmp"),strcat(strf,".diary"));
