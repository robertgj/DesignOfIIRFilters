% flt2SD_test.m
% Copyright (C) 2017-2025 Robert G. Jenssen

test_common;

delete("flt2SD_test.diary");
delete("flt2SD_test.diary.tmp");
diary flt2SD_test.diary.tmp

% Test vectors : [num, nbits, ndigits, verbose]
testrand=0.5-[  0.021960  0.713256  0.836613   0.155482;
                0.333852  0.887277  0.118811   0.175826;
                0.198802  0.304426  0.035785   0.145806;
                0.325552  0.268381  0.258796   0.670809];
testrandSD=flt2SD(testrand,8,2,true);
print_polynomial(testrandSD,"testrandSD","%7.5f");
testrandSDarray= ...
  flt2SD(testrand,8,kron(ones(rows(testrand),1),[1:columns(testrand)]),true);
print_polynomial(testrandSDarray,"testrandSDarray","%5.3f");

max_nbits=floor(log2(flintmax()))-2;
testvecs1={ ...
{0.1111,max_nbits,max_nbits+1,true}, ...
{0.1111,max_nbits+1,max_nbits,true}, ...
{0.1111,8,9,true}, ...
{0.1111,8,0,true}, ...
{0.1111,0,8,true}, ...
{0,8,1,true}, ...
{0,8,8,true}, ...
{1,8,1,true}, ...
{1,8,8,true}, ...
{-1,8,1,true}, ...
{-1,8,8,true}, ...
{2,8,1,true}, ...
{2,8,8,true}, ...
{-2,8,1,true}, ...
{-2,8,8,true}, ...
{0.5,8,1,false}, ...
{1.5,8,2,true}, ...
{0.5,8,1,true}, ...
{0.5,8,2,true}, ...
{0.5,8,8,true}, ...
{0.25,8,1,true}, ...
{0.25,8,2,true}, ...
{0.25,8,8,true}, ...
{0.5/(2^6),8,1,true}, ...
{0.5/(2^6),8,8,true}, ...
{0.5/(2^7),8,1,true}, ...
{0.5/(2^7),8,8,true}, ...
{0.4/(2^7),8,1,true}, ...
{0.4/(2^7),8,8,true}, ...
{-0.5,8,1,true}, ...
{-0.5,8,2,true}, ...
{-0.5,8,8,true}, ...
{-0.25,8,1,true}, ...
{-0.25,8,2,true}, ...
{-0.25,8,8,true}, ...
{-0.5/(2^6),8,1,true}, ...
{-0.5/(2^6),8,8,true}, ...
{-0.5/(2^7),8,1,true}, ...
{-0.5/(2^7),8,8,true}, ...
{-0.4/(2^7),8,1,true}, ...
{-0.4/(2^7),8,8,true}, ...
{0.1111,8,2,true}, ...
{-0.1111,8,2,true}, ...
{0.1111,16,4,true}, ...
{-0.1111,16,4,true}, ...
{0.1111,max_nbits,8,true}, ...
{0.1111,max_nbits,max_nbits,true}, ...
{4.1111,8,2,true}, ...
{-4.1111,8,2,true}, ...
{4.1111,16,4,true}, ...
{-4.1111,16,4,true}, ...
{4.1111,max_nbits,8,true}, ...
{4.1111,max_nbits,max_nbits,true}, ...
{[0.5,-0.5],8,1,true}, ...
{[0.5,-0.5;0.375,-0.375],8,2,true}, ...
{[1.02,1,-1,-1.02],8,2,true}, ...
{testrandSD,8,3,true}, ...
{(-109:-103)/128,8,2,true}, ...
{(-90:-80)/128,8,2,true}, ...
{(-45:-40)/128,8,2,true}, ...
{(40:45)/128,8,2,true}, ...
{(80:90)/128,8,2,true}, ...
{(103:109)/128,8,2,true}, ...
};

function y1=testfun1(vec)
  x=cell2mat(vec(1));
  args=cell2mat(vec(2:4));
  nbits=args(1);
  ndigits=args(2);
  verbose=args(3);
  try
    y1=flt2SD(x,nbits,ndigits,verbose);
  catch
    y1=0;
    printf("Caught y1=flt2SD([");
    printf(" %g ",x)
    printf("],%d,%d,%d)\n",nbits,ndigits,verbose); 
  end_try_catch
endfunction
y1=cellfun(@testfun1,testvecs1,"UniformOutput",false);

testvecs3={ ...
{0,8,1,true}, ...
{0,8,8,true}, ...
{1,8,1,true}, ...
{1,8,8,true}, ...
{-1,8,1,true}, ...
{-1,8,8,true}, ...
{2,8,1,true}, ...
{2,8,8,true}, ...
{-2,8,1,true}, ...
{-2,8,8,true}, ...
{0.5,8,1,false}, ...
{1.5,8,2,true}, ...
{0.5,8,1,true}, ...
{0.5,8,2,true}, ...
{0.5,8,8,true}, ...
{0.25,8,1,true}, ...
{0.25,8,2,true}, ...
{0.25,8,8,true}, ...
{0.5/(2^6),8,1,true}, ...
{0.5/(2^6),8,8,true}, ...
{0.5/(2^7),8,1,true}, ...
{0.5/(2^7),8,8,true}, ...
{0.4/(2^7),8,1,true}, ...
{0.4/(2^7),8,8,true}, ...
{0.6/(2^7),8,1,true}, ...
{0.6/(2^7),8,8,true}, ...
{1/(2^7),8,1,true}, ...
{1/(2^7),8,8,true}, ...
{-0.5,8,1,true}, ...
{-0.5,8,2,true}, ...
{-0.5,8,8,true}, ...
{-0.25,8,1,true}, ...
{-0.25,8,2,true}, ...
{-0.25,8,8,true}, ...
{-0.5/(2^6),8,1,true}, ...
{-0.5/(2^6),8,8,true}, ...
{-0.5/(2^7),8,1,true}, ...
{-0.5/(2^7),8,8,true}, ...
{-0.4/(2^7),8,1,true}, ...
{-0.4/(2^7),8,8,true}, ...
{-0.6/(2^7),8,1,true}, ...
{-0.6/(2^7),8,8,true}, ...
{-1/(2^7),8,1,true}, ...
{-1/(2^7),8,8,true}, ...
{0.1111,8,2,true}, ...
{-0.1111,8,2,true}, ...
{0.1111,16,4,true}, ...
{-0.1111,16,4,true}, ...
};
function [y3,yu,yl]=testfun3(vec)
  x=cell2mat(vec(1));
  args=cell2mat(vec(2:4));
  nbits=args(1);
  ndigits=args(2);
  verbose=args(3);
  try
    [y3,yu,yl]=flt2SD(x,nbits,ndigits,verbose);
  catch
    y3=0;yu=0;yl=0;
    printf("Caught [y3,yu,yl]=flt2SD([");
    printf(" %g ",x)
    printf("],%d,%d,%d)\n",nbits,ndigits,verbose); 
  end_try_catch
endfunction
[y3,yu,yl]=cellfun(@testfun3,testvecs3,"UniformOutput",false);

% Done
diary off
movefile flt2SD_test.diary.tmp flt2SD_test.diary;
