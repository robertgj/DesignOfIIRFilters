% schurOneMlattice_kyp_Dinh_lowpass_R2_test.m
%
% Design of an R=2 one-multiplier Schur lattice low-pass filter with
% BMI constraints derived from the KYP lemma solved by the convex
% approximation of Dinh et al. using YALMIP.
%
% For tp=nN-3:
%  nN     rows(A_s)   rows(F_s)     rows(A_z)         rows(F_z)
%         (3nN/2)-1              (3nN/2)-1+(nN-3)   
%   8        11          24            16               34
%  10        14          30            21               44
%  12        17          36            26               54
%  14        20          42            31               64
%  16        23          48            36               74
% 
% See:
% [1] "Generalised KYP Lemma: Unified Frequency Domain Inequalities With Design
%      Applications", T. Iwasaki and S. Hara, IEEE Trans. Control,
%      Vol. 50 No. 1, January 2005, pp 41-59
% [2] "Combining Convexâ€“Concave Decompositions and Linearization Approaches for
%      Solving BMIs, With Application to Static Output Feedback", Dinh et al.
%      July, 2011. Available at:
%      https://set.kuleuven.be/optec/Software/softwarefiles/bmipaper
%
% Copyright (C) 2025 Robert G. Jenssen

test_common;

pkg load optim;

strf="schurOneMlattice_kyp_Dinh_lowpass_R2_test";

delete(strcat(strf,".diary.tmp"));
delete(strcat(strf,".diary"));
eval(sprintf("diary %s.diary.tmp",strf));

tic;

use_best_k_found=true
maxiter_kyp=50;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Start
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Filter specification
tol=5e-5,k_max=0.999
nN=8,R=2,fap=0.1,fas=0.2,Was=1,tp=5

if rem(nN,2)
  error("Expect nN even!");
endif

% Frequency points
n=1000;
f=0.5*(0:(n-1))'/n;
w=2*pi*f;
nap=ceil(fap*n/0.5)+1;
nas=floor(fas*n/0.5)+1;

% Frequency vectors
wa=w;
Asqd=[ones(nap,1);zeros(n-nap,1)];
Wa=[ones(nap,1);zeros(nas-nap-1,1);Was*ones(n-nas+1,1)];

% Unconstrained minimisation
[n0,d0R]=tf_wise_lowpass(nN,R,fap,fas,Was);

% Plot the initial response
H0=freqz(n0,d0R,w);
T0=delayz(n0,d0R,w);
subplot(211);
[ax,h1,h2]=plotyy(f,20*log10(abs(H0)),f,20*log10(abs(H0)));
axis(ax(1),[0 0.5 -0.2 0.2]);
axis(ax(2),[0 0.5 -60 -40]);
ylabel("Amplitude(dB)");
grid("on");
strI=sprintf(["Initial response of tapped Schur lattice filter : ", ...
              "nN=%d, fap=%g, tp=%g, fas=%g"], nN,fap,tp,fas);
title(strI);
subplot(212);
plot(w*0.5/pi,T0);
axis([0 0.5 0 20]);
ylabel("Delay(samples)");
xlabel("Frequency");
grid("on");
print(strcat(strf,"_initial_response"),"-dpdflatex");
close

% Plot the initial filter poles and zeros
zplane(roots(n0),roots(d0R));
strP=sprintf(["Pole-zero plot of initial tapped Schur lattice filter : ", ...
              "nN=%d, fap=%g, tp=%g, fas=%g"], ...
             nN,fap,tp,fas);
title(strP);
grid("on");
print(strcat(strf,"_initial_pz"),"-dpdflatex");
close

% Find the lattice k0 and c0 coefficients with fixed epsilon0=1
[k0,~,~,c0]=tf2schurOneMlattice(n0,d0R,ones(nN,1));
k0_ones=ones(size(k0));

% Sanity check
Asq0=schurOneMlatticeAsq(w,k0,k0_ones,k0_ones,c0);
if max(abs(sqrt(Asq0)-abs(H0))) > 100*eps
  error("max(abs(sqrt(Asq0)-abs(H0)))(%g*eps) > 100*eps", ...
        max(abs(sqrt(Asq0)-abs(H0)))/eps);
endif

% ABCD corresponds to [A,B;C,D] and ABCDk{m} represents dABCDdk{m}
[A0,B0,C0,D0,~,~,~,~,ABCD0,ABCDk,ABCDc]= ...
  schurOneMR2lattice2Abcd(k0,k0_ones,c0);
Ak=cell(1,nN);
Bk=cell(1,nN);
Ck=cell(1,nN);
Dk=cell(1,nN);
for mm=1:nN,
  Ak{mm}=ABCDk{mm}(1:rows(A0),1:columns(A0));
  Bk{mm}=ABCDk{mm}(1:rows(A0),columns(A0)+1);
  Ck{mm}=ABCDk{mm}(rows(A0)+1,1:columns(A0));
  Dk{mm}=ABCDk{mm}(rows(A0)+1,columns(A0)+1);
endfor
Ac=cell(1,nN+1);
Bc=cell(1,nN+1);
Cc=cell(1,nN+1);
Dc=cell(1,nN+1);
for mm=1:(nN+1),
  Ac{mm}=ABCDc{mm}(1:rows(A0),1:columns(A0));
  Bc{mm}=ABCDc{mm}(1:rows(A0),columns(A0)+1);
  Cc{mm}=ABCDc{mm}(rows(A0)+1,1:columns(A0));
  Dc{mm}=ABCDc{mm}(rows(A0)+1,columns(A0)+1);
endfor
% Sanity check
Acheck=ABCD0(1:rows(A0),1:columns(A0));
Bcheck=ABCD0(1:rows(A0),columns(A0)+1);
Ccheck=ABCD0(rows(A0)+1,1:columns(A0));
Dcheck=ABCD0(rows(A0)+1,columns(A0)+1);
for mm=1:nN,
  Acheck=Acheck+(k0(mm)*Ak{mm});
  Bcheck=Bcheck+(k0(mm)*Bk{mm});
  Ccheck=Ccheck+(k0(mm)*Ck{mm});
  Dcheck=Dcheck+(k0(mm)*Dk{mm});
endfor
for mm=1:(nN+1),
  Acheck=Acheck+(c0(mm)*Ac{mm});
  Bcheck=Bcheck+(c0(mm)*Bc{mm});
  Ccheck=Ccheck+(c0(mm)*Cc{mm});
  Dcheck=Dcheck+(c0(mm)*Dc{mm});
endfor
if max(max(abs(Acheck-A0))) > eps
  error("max(max(abs(Acheck-A0)))(%g*eps) > eps",max(max(abs(Acheck-A0)))/eps);
endif
if max(abs(Bcheck-B0)) > eps
  error("max(abs(Bcheck-B0))(%g*eps) > eps",max(abs(Bcheck-B0))/eps);
endif
if max(abs(Ccheck-C0)) > eps
  error("max(abs(Ccheck-C0))(%g*eps) > eps",max(abs(Ccheck-C0))/eps);
endif
if max(abs(Dcheck-D0)) > eps
  error("max(abs(Dcheck-D0))(%g*eps) > eps",max(abs(Dcheck-D0))/eps);
endif


%
% Initial R=2 Schur one-multiplier lattice lowpass filter implementation
%
% Stop band filter
A_s=A0;
B_s=B0;
C_s=C0;
D_s=D0;
% In the pass-band compare the output to a delay of tp samples
Ndelay=[zeros(tp,1);1];
[Adelay,Bdelay,Cdelay,Ddelay]=tf2Abcd(Ndelay,1);
A_z=[[A0,zeros(rows(A0),columns(Adelay))]; ...
     [zeros(rows(Adelay),columns(A0)),Adelay]];
B_z=[B0;Bdelay];
C_z=[C0,-Cdelay];
D_z=(D0-Ddelay);
% Sanity check on the R=2 Schur one-multiplier lattice lowpass filter
H0_z=Abcd2H(w,A_z,B_z,C_z,D_z);
H0_s=Abcd2H(w,A_s,B_s,C_s,D_s);
if max(abs(abs(H0-H0_s))) > 2e4*eps
  error("max(abs(abs(H0)-abs(H0_s)))(%g*eps) > 2e4*eps", ...
        max(abs(abs(H0-H0_s)))/eps);
endif
if max(abs(H0_s-exp(-j*w*tp)-H0_z)) > 100*eps
  error("max(abs(H0_s-exp(-j*w*tp)-H0_z))(%g*eps) > 100*eps", ...
        max(abs(H0_s-exp(-j*w*tp)-H0_z))/eps);
endif

% Calculate initial Asq, Esq and gradient
Asq=schurOneMlatticeAsq(wa,k0,k0_ones,k0_ones,c0);
printf("10*log10(max(Asq(pass)))=%g dB\n",10*log10(max(Asq(1:nap))));
printf("10*log10(min(Asq(pass)))=%g dB\n",10*log10(min(Asq(1:nap))));
printf("10*log10(max(Asq(stop)))=%g dB\n",10*log10(max(Asq(nas:end))));
[Esq,gradEsq]=schurOneMlatticeEsq(k0,k0_ones,k0_ones,c0,wa,Asqd,Wa);
printf("Esq=%g\n",Esq);
print_polynomial(gradEsq,"gradEsq","%g");

%
% Find initial values for Esq_z,Esq_s,P_z,P_z,Q_z,Q_s,XYZ_z,XYZ_s
%
Phi=[-1,0;0,1];

% Pass band 
Psi_z=[0, 1; 1,-2*cos(2*pi*fap)];
Esq_z=tol*ceil((max(abs(H0_z(1:nap)))^2)/tol);
n_z=rows(A_z);
P_z=sdpvar(n_z,n_z,"symmetric","real");
Q_z=sdpvar(n_z,n_z,"symmetric","real");
dX_z=sdpvar(n_z,n_z,"symmetric","real");
dY_z=sdpvar(n_z,n_z,"symmetric","real");
dZ_z=sdpvar(1,n_z,"full","real");
dXYZ_z=[dX_z;dY_z;dZ_z];
L_z=(kron(Phi,P_z)+kron(Psi_z,Q_z));
U_z=[[-eye(n_z),A_z,B_z,zeros(n_z,1)];[zeros(1,n_z),C_z,D_z,-1]]';
V_z=[[dXYZ_z,zeros((2*n_z)+1,1)];[zeros(1,n_z),1]]';
UV_z=U_z*V_z;
F_z=[[L_z,zeros(2*n_z,2)];  ...
     [zeros(2,2*n_z),diag([-Esq_z,1])]] + UV_z+(UV_z');

% Stop band 
Psi_s=[0,-1;-1,2*cos(2*pi*fas)];
Esq_s=tol*ceil((max(abs(H0_s(nas:end)))^2)/tol);
n_s=rows(A_s);
P_s=sdpvar(n_s,n_s,"symmetric","real");
Q_s=sdpvar(n_s,n_s,"symmetric","real");
dX_s=sdpvar(n_s,n_s,"symmetric","real");
dY_s=sdpvar(n_s,n_s,"symmetric","real");
dZ_s=sdpvar(1,n_s,"full","real");
dXYZ_s=[dX_s;dY_s;dZ_s];
L_s=(kron(Phi,P_s)+kron(Psi_s,Q_s));
U_s=[[-eye(n_s),A_s,B_s,zeros(n_s,1)]; ...
     [zeros(1,n_s),C_s,D_s,-1]]';
V_s=[[dXYZ_s,zeros((2*n_s)+1,1)]; ...
     [zeros(1,n_s),1]]';
UV_s=U_s*V_s;
F_s=[[L_s,zeros(2*n_s,2)]; ...
     [zeros(2,2*n_s),diag([-Esq_s,1])]] + UV_s+(UV_s');

% Solve for the initial SDP variables
Constraints=[ F_z<=tol, Q_z>=0, F_s<=tol, Q_s>=0 ];
Options=sdpsettings("solver","sedumi","sedumi.eps",tol);
Objective=[];
sol=optimize(Constraints,Objective,Options)
if sol.problem
  error("YALMIP failed : %s",sol.info);
endif
% Sanity checks
check(Constraints)
printf("Initial Esq_z=%g, Esq_s=%g\n\n",Esq_z,Esq_s);

% Initialise pass band constraints
XYZ_z=value(dXYZ_z);

% Initialise stop band constraints
XYZ_s=value(dXYZ_s);

% Initialise lattice SDP variables
% Reflection coefficients
k=k0;
dk=[];
for mm=R:R:nN,
  dk=[dk, 0, sdpvar(1,1,"full","real")];  
endfor
% Tap coefficients
c=c0;
dc=sdpvar(1,nN+1,"full","real");

% State variable Delta ABCD variables
dA=zeros(rows(A0),columns(A0));
dB=zeros(rows(B0),1);
dC=zeros(1,columns(C0));
dD=zeros(1,1);
for mm=1:nN,
  dA=dA+(dk(mm)*Ak{mm});
  dB=dB+(dk(mm)*Bk{mm});
  dC=dC+(dk(mm)*Ck{mm});
  dD=dD+(dk(mm)*Dk{mm});
endfor
for mm=1:(nN+1),
  dA=dA+(dc(mm)*Ac{mm});
  dB=dB+(dc(mm)*Bc{mm});
  dC=dC+(dc(mm)*Cc{mm});
  dD=dD+(dc(mm)*Dc{mm});
endfor
dA_s=dA;
dB_s=dB;
dC_s=dC;
dD_s=dD;
dA_z=[[dA,zeros(rows(dA),columns(Adelay))]; ...
      [zeros(rows(Adelay),columns(dA)),zeros(size(Adelay))]];
dB_z=[dB;zeros(size(Bdelay))];
dC_z=[dC,zeros(size(Cdelay))];
dD_z=dD;

% Pass band constraints
dEsq_z=sdpvar(1,1,"full","real");

% Stop band constraints
dEsq_s=sdpvar(1,1,"full","real");

% Make a vector of SDP decision variables
dkc=[dk,dc];
dz=[dEsq_z;dEsq_s;vec(dk);vec(dc);vec(dXYZ_z);vec(dXYZ_s)];

% Initialise lists of norm(dk), Esq, etc
list_Objective=[];
list_norm_dz=[];
list_norm_dkc=[];
list_Esq=[];
list_Esq_z=[];
list_Esq_s=[];
list_Asq_max_pass=[];
list_Asq_min_pass=[];
list_Asq_max_stop=[];
list_k=cell();
list_c=cell();


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Main loop
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if use_best_k_found
  maxiter_succ_approx=0;
  printf("\n\nUsing best k found!\n\n");
  % 10*log10(max(Asq(pass)))=0.220765 dB
  % 10*log10(min(Asq(pass)))=-0.414535 dB
  % 10*log10(max(Asq(stop)))=-39.47 dB
  % min(T1(pass))=4.05217,max(T1(pass))=7.54308
  Esq=1.3615e-05
  gradEsq = ...
    [ -7.75382e-05, -0.000133464, -2.21305e-05, 0.000139697, ... 
      6.55149e-05, 1.35623e-05, 7.04698e-06, 0.000113577, ... 
      8.50923e-05, 0.000103598, 0.000143634, 0.000154236, ... 
      0.000118418, 0.000116719, 0.000117569, 0.00010425, ... 
      9.05566e-05 ];
  n0 = ...
    [   0.0127830033,   0.0484013589,   0.0999941028,   0.1452422148, ... 
        0.1630047600,   0.1442005068,   0.0984402729,   0.0472185246, ... 
        0.0123772716 ]';
  d0R = ...
    [   1.0000000000,  -0.0000000000,  -0.7913156404,   0.0000000000, ... 
        0.8359337994,  -0.0000000000,  -0.3537495185,   0.0000000000, ... 
        0.0826241645 ]';
  k0 = ...
    [   0.0000000000,  -0.3707309661,   0.0000000000,   0.5999187031, ... 
        0.0000000000,  -0.2903498716,   0.0000000000,   0.0826241645 ];
  c0 = ...
    [  -0.0517776968,   0.0408108873,   0.1288678062,   0.1749163632, ... 
       0.3082307401,   0.2373884305,   0.1017061108,   0.0447074437, ... 
       0.0127830033 ];
  k = ...
    [   0.0000000000,  -0.3706391454,   0.0000000000,   0.6002041516, ... 
        0.0000000000,  -0.3256574852,   0.0000000000,   0.1366535300 ];
  c = ...
    [  -0.0040000129,   0.1095410164,   0.1614035043,   0.1792047332, ... 
       0.2657944347,   0.1733152288,   0.0561325860,   0.0145301177, ... 
       -0.0025257963 ];
  n1 = ...
    [  -0.0025257963,   0.0165157096,   0.0659074458,   0.1198214323, ... 
       0.1511394253,   0.1541155326,   0.1288502630,   0.0774472429, ... 
       0.0246934814 ];
  d1R = ...
    [   1.0000000000,   0.0000000000,  -0.8330615188,   0.0000000000, ... 
        0.9017652741,   0.0000000000,  -0.4334168936,   0.0000000000, ... 
        0.1366535300 ];
  list_Objective = ...
    [   0.0692278152,   0.0169776101,   0.0050636323,   0.0011123318, ... 
        0.0004834890,   0.0002572635,   0.0001570881,   0.0001111709, ... 
        0.0000846745,   0.0000696143,   0.0000557211,   0.0000466757, ... 
        0.0000384850,   0.0000327579,   0.0000281884,   0.0000246385, ... 
        0.0000213619,   0.0000205253,   0.0000171142,   0.0000153756, ... 
        0.0000138272,   0.0000131091,   0.0000128602,   0.0000121489, ... 
        0.0000110443,   0.0000099607,   0.0000098734,   0.0000138153, ... 
        0.0000071349,   0.0000137250,   0.0000072290,   0.0000068516, ... 
        0.0000065863,   0.0000062782,   0.0000059395,   0.0000055833, ... 
        0.0000052491,   0.0000048824,   0.0000043559,   0.0000028977, ... 
        0.0000029923,   0.0000048846,   0.0000065124,   0.0000060486, ... 
        0.0000063797,   0.0000028188,   0.0000031176,   0.0000052119, ... 
        0.0000027335,   0.0000005448 ]';
  list_norm_dz = ...
    [   0.2407281399,   0.2025528060,   0.0975709801,   0.2060071386, ... 
        0.0969161545,   0.2283486558,   0.1331821079,   0.1005546418, ... 
        0.0747242075,   0.3633552674,   0.2461773509,   0.3169301163, ... 
        0.1549582193,   0.1665153927,   0.1604883701,   0.1444619694, ... 
        0.1302232267,   0.2304827264,   0.0616057444,   0.0643242950, ... 
        0.0603710955,   0.0670136547,   0.1053170959,   0.1145862570, ... 
        0.1007402218,   0.0867384681,   1.5567634914,   1.1210191975, ... 
        0.0340943777,   0.8927415959,   0.0373688813,   0.3153765958, ... 
        0.3210333847,   0.3210148029,   0.3184215786,   0.3149994862, ... 
        0.3152844432,   0.3167634554,   0.3188728481,   0.3124066640, ... 
        0.3482320180,   0.4118944926,   0.4557637315,   0.4456193050, ... 
        0.4525230651,   0.3234781929,   0.3392128696,   0.5776823184, ... 
        0.2704608997,   0.1924378365 ]';
  list_norm_dkc = ...
    [   0.1044439919,   0.0261999336,   0.0144071634,   0.0091880858, ... 
        0.0128280652,   0.0076993684,   0.0056830872,   0.0041518605, ... 
        0.0033671605,   0.0027756341,   0.0023677937,   0.0019575177, ... 
        0.0016068693,   0.0014165984,   0.0011964810,   0.0010207243, ... 
        0.0007654840,   0.0006582463,   0.0008371396,   0.0006598427, ... 
        0.0005820314,   0.0005473569,   0.0004824093,   0.0004664077, ... 
        0.0004556795,   0.0004390155,   0.0006386016,   0.0007316615, ... 
        0.0008009466,   0.0005502487,   0.0006764212,   0.0002688553, ... 
        0.0002541676,   0.0002490124,   0.0002397717,   0.0002305566, ... 
        0.0002202956,   0.0002122070,   0.0002083739,   0.0002383547, ... 
        0.0002115167,   0.0001848665,   0.0001762524,   0.0001731895, ... 
        0.0001579336,   0.0001910780,   0.0001970465,   0.0002683439, ... 
        0.0002235656,   0.0002599438 ]';
  list_Esq = ...
    [   0.0045523826,   0.0079306327,   0.0093898497,   0.0102622858, ... 
        0.0083579436,   0.0068440342,   0.0058284471,   0.0050612955, ... 
        0.0044522350,   0.0039872377,   0.0036142950,   0.0033223733, ... 
        0.0030986504,   0.0029128789,   0.0027637792,   0.0026417352, ... 
        0.0025436440,   0.0024561901,   0.0023655608,   0.0022925442, ... 
        0.0022275780,   0.0021670063,   0.0021118467,   0.0020585273, ... 
        0.0020080352,   0.0019609696,   0.0019108260,   0.0018909033, ... 
        0.0018311248,   0.0018142743,   0.0017651601,   0.0017416722, ... 
        0.0017180621,   0.0016946480,   0.0016721494,   0.0016507009, ... 
        0.0016303451,   0.0016109768,   0.0015924725,   0.0015745612, ... 
        0.0015574210,   0.0015424302,   0.0015284916,   0.0015132329, ... 
        0.0014999897,   0.0014852501,   0.0014697038,   0.0014575914, ... 
        0.0014426723,   0.0014327651 ]';
  list_Esq_z = ...
    [   0.0558453916,   0.0131018817,   0.0030896428,   0.0000003344, ... 
        0.0000000855,   0.0000000293,   0.0000000136,   0.0000000079, ... 
        0.0000000099,   0.0000003582,   0.0000001725,   0.0000000806, ... 
        0.0000000103,   0.0000000216,   0.0000000819,   0.0000001871, ... 
        0.0000000341,   0.0000002678,   0.0000001946,   0.0000002402, ... 
        0.0000001845,   0.0000004231,   0.0000006606,   0.0000007172, ... 
        0.0000006462,   0.0000005712,   0.0000001013,   0.0000004992, ... 
        0.0000000431,   0.0000006701,   0.0000002616,   0.0000005318, ... 
        0.0000006057,   0.0000006436,   0.0000006580,   0.0000006566, ... 
        0.0000006476,   0.0000006165,   0.0000005318,   0.0000002188, ... 
        0.0000003308,   0.0000007893,   0.0000010404,   0.0000008353, ... 
        0.0000007608,   0.0000000240,   0.0000000036,   0.0000008438, ... 
        0.0000001365,   0.0000000241 ]';
  list_Esq_s = ...
    [   0.0075874198,   0.0034654521,   0.0018787885,   0.0010695585, ... 
        0.0004740108,   0.0002520199,   0.0001553008,   0.0001101519, ... 
        0.0000841062,   0.0000679358,   0.0000549426,   0.0000455906, ... 
        0.0000382345,   0.0000324590,   0.0000278489,   0.0000242427, ... 
        0.0000211582,   0.0000197263,   0.0000168817,   0.0000150941, ... 
        0.0000136062,   0.0000126411,   0.0000120887,   0.0000113004, ... 
        0.0000102966,   0.0000093142,   0.0000073485,   0.0000120594, ... 
        0.0000070802,   0.0000122579,   0.0000069535,   0.0000062203, ... 
        0.0000058776,   0.0000055316,   0.0000051801,   0.0000048275, ... 
        0.0000045021,   0.0000041656,   0.0000037224,   0.0000025813, ... 
        0.0000025402,   0.0000039256,   0.0000052643,   0.0000050147, ... 
        0.0000054141,   0.0000026902,   0.0000029989,   0.0000040343, ... 
        0.0000025238,   0.0000004837 ]';
  list_Asq_max_pass = ...
    [   1.0646049308,   1.0733522889,   1.0685439512,   1.0625747243, ... 
        1.0481316665,   1.0441384549,   1.0454211767,   1.0473098134, ... 
        1.0495592764,   1.0516730690,   1.0540442811,   1.0560697279, ... 
        1.0574458642,   1.0587418278,   1.0596620479,   1.0602870907, ... 
        1.0602868364,   1.0599471723,   1.0599842501,   1.0598475597, ... 
        1.0596015178,   1.0592874915,   1.0588709271,   1.0584402685, ... 
        1.0580605761,   1.0577162442,   1.0576054068,   1.0561333136, ... 
        1.0566849892,   1.0554192401,   1.0558347397,   1.0556812006, ... 
        1.0554432177,   1.0552142342,   1.0549856407,   1.0547569189, ... 
        1.0545227013,   1.0542948194,   1.0540984868,   1.0540358057, ... 
        1.0538715328,   1.0534339855,   1.0528977413,   1.0525666111, ... 
        1.0521868841,   1.0521543926,   1.0519261122,   1.0516203359, ... 
        1.0519257515,   1.0521472525 ]';
  list_Asq_min_pass = ...
    [   0.8460775180,   0.7924798213,   0.7703837169,   0.7580067493, ... 
        0.7775100284,   0.7954151615,   0.8093908167,   0.8210839862, ... 
        0.8313915598,   0.8400742196,   0.8478614746,   0.8545010058, ... 
        0.8598527470,   0.8646427016,   0.8686342674,   0.8719858295, ... 
        0.8744985071,   0.8766274228,   0.8791325710,   0.8811333390, ... 
        0.8828900339,   0.8845375688,   0.8859972264,   0.8874408564, ... 
        0.8888650606,   0.8902399424,   0.8919276191,   0.8917387244, ... 
        0.8942296429,   0.8940984307,   0.8962145334,   0.8970306886, ... 
        0.8978222357,   0.8986262080,   0.8994106569,   0.9001711975, ... 
        0.9009007282,   0.9016070378,   0.9023069685,   0.9030865171, ... 
        0.9037826153,   0.9042122960,   0.9045435193,   0.9050832121, ... 
        0.9055009933,   0.9061902778,   0.9068513746,   0.9073936566, ... 
        0.9083208373,   0.9089635743 ]';
  list_Asq_max_stop = ...
    [   0.0023382956,   0.0016084587,   0.0014529966,   0.0009535678, ... 
        0.0004335814,   0.0003076540,   0.0002682838,   0.0002355253, ... 
        0.0002107711,   0.0001921576,   0.0001774898,   0.0001661498, ... 
        0.0001572064,   0.0001496390,   0.0001434222,   0.0001516990, ... 
        0.0001553844,   0.0001546641,   0.0001598294,   0.0001612730, ... 
        0.0001597601,   0.0001587370,   0.0001550620,   0.0001521798, ... 
        0.0001502754,   0.0001487420,   0.0001540397,   0.0001299040, ... 
        0.0001367949,   0.0001211462,   0.0001268471,   0.0001297295, ... 
        0.0001282956,   0.0001268207,   0.0001255028,   0.0001243220, ... 
        0.0001231498,   0.0001221036,   0.0001215004,   0.0001230837, ... 
        0.0001227171,   0.0001191510,   0.0001157408,   0.0001146622, ... 
        0.0001129647,   0.0001122017,   0.0001100741,   0.0001105046, ... 
        0.0001089086,   0.0001129790 ]';
  list_k{1} = ...
    [   0.0000000000,  -0.3727818155,   0.0000000000,   0.5958027578, ... 
        0.0000000000,  -0.3014391435,   0.0000000000,   0.1059644873 ];
  list_k{2} = ...
    [   0.0000000000,  -0.3741964639,   0.0000000000,   0.5946046907, ... 
        0.0000000000,  -0.3073635464,   0.0000000000,   0.1223357482 ];
  list_k{3} = ...
    [   0.0000000000,  -0.3746340206,   0.0000000000,   0.5945962533, ... 
        0.0000000000,  -0.3127851921,   0.0000000000,   0.1335470763 ];
  list_k{4} = ...
    [   0.0000000000,  -0.3742140942,   0.0000000000,   0.5951738476, ... 
        0.0000000000,  -0.3167727535,   0.0000000000,   0.1388336367 ];
  list_k{5} = ...
    [   0.0000000000,  -0.3737038527,   0.0000000000,   0.5951026941, ... 
        0.0000000000,  -0.3182591656,   0.0000000000,   0.1385464790 ];
  list_k{6} = ...
    [   0.0000000000,  -0.3733736538,   0.0000000000,   0.5951046671, ... 
        0.0000000000,  -0.3190693035,   0.0000000000,   0.1384624239 ];
  list_k{7} = ...
    [   0.0000000000,  -0.3730639098,   0.0000000000,   0.5952055048, ... 
        0.0000000000,  -0.3196103699,   0.0000000000,   0.1384193703 ];
  list_k{8} = ...
    [   0.0000000000,  -0.3727697581,   0.0000000000,   0.5954697909, ... 
        0.0000000000,  -0.3199882139,   0.0000000000,   0.1383865203 ];
  list_k{9} = ...
    [   0.0000000000,  -0.3725218521,   0.0000000000,   0.5958560997, ... 
        0.0000000000,  -0.3202652905,   0.0000000000,   0.1383407610 ];
  list_k{10} = ...
    [   0.0000000000,  -0.3723112081,   0.0000000000,   0.5962779256, ... 
        0.0000000000,  -0.3205057041,   0.0000000000,   0.1382901455 ];
  list_k{11} = ...
    [   0.0000000000,  -0.3721491072,   0.0000000000,   0.5966752655, ... 
        0.0000000000,  -0.3207155280,   0.0000000000,   0.1382514277 ];
  list_k{12} = ...
    [   0.0000000000,  -0.3720024132,   0.0000000000,   0.5970307759, ... 
        0.0000000000,  -0.3209037569,   0.0000000000,   0.1382159182 ];
  list_k{13} = ...
    [   0.0000000000,  -0.3718658196,   0.0000000000,   0.5973327898, ... 
        0.0000000000,  -0.3210811180,   0.0000000000,   0.1381769398 ];
  list_k{14} = ...
    [   0.0000000000,  -0.3717541525,   0.0000000000,   0.5976355810, ... 
        0.0000000000,  -0.3212469306,   0.0000000000,   0.1381327479 ];
  list_k{15} = ...
    [   0.0000000000,  -0.3716623564,   0.0000000000,   0.5979290627, ... 
        0.0000000000,  -0.3214052274,   0.0000000000,   0.1380924326 ];
  list_k{16} = ...
    [   0.0000000000,  -0.3715922510,   0.0000000000,   0.5982101051, ... 
        0.0000000000,  -0.3215586903,   0.0000000000,   0.1380510385 ];
  list_k{17} = ...
    [   0.0000000000,  -0.3715103404,   0.0000000000,   0.5984040306, ... 
        0.0000000000,  -0.3217005862,   0.0000000000,   0.1380011162 ];
  list_k{18} = ...
    [   0.0000000000,  -0.3714356747,   0.0000000000,   0.5985251379, ... 
        0.0000000000,  -0.3218549457,   0.0000000000,   0.1379410111 ];
  list_k{19} = ...
    [   0.0000000000,  -0.3713651247,   0.0000000000,   0.5987380626, ... 
        0.0000000000,  -0.3220084945,   0.0000000000,   0.1378939686 ];
  list_k{20} = ...
    [   0.0000000000,  -0.3712998936,   0.0000000000,   0.5989312914, ... 
        0.0000000000,  -0.3221548848,   0.0000000000,   0.1378497874 ];
  list_k{21} = ...
    [   0.0000000000,  -0.3712234757,   0.0000000000,   0.5990948899, ... 
        0.0000000000,  -0.3223028418,   0.0000000000,   0.1378057984 ];
  list_k{22} = ...
    [   0.0000000000,  -0.3711582882,   0.0000000000,   0.5992411911, ... 
        0.0000000000,  -0.3224465403,   0.0000000000,   0.1377551965 ];
  list_k{23} = ...
    [   0.0000000000,  -0.3710863699,   0.0000000000,   0.5993439220, ... 
        0.0000000000,  -0.3225939939,   0.0000000000,   0.1377002832 ];
  list_k{24} = ...
    [   0.0000000000,  -0.3710088599,   0.0000000000,   0.5994337335, ... 
        0.0000000000,  -0.3227419516,   0.0000000000,   0.1376432969 ];
  list_k{25} = ...
    [   0.0000000000,  -0.3709291459,   0.0000000000,   0.5995266555, ... 
        0.0000000000,  -0.3228875589,   0.0000000000,   0.1375876146 ];
  list_k{26} = ...
    [   0.0000000000,  -0.3708492506,   0.0000000000,   0.5996224460, ... 
        0.0000000000,  -0.3230305210,   0.0000000000,   0.1375337435 ];
  list_k{27} = ...
    [   0.0000000000,  -0.3708334267,   0.0000000000,   0.5998427892, ... 
        0.0000000000,  -0.3231569943,   0.0000000000,   0.1374849406 ];
  list_k{28} = ...
    [   0.0000000000,  -0.3707478059,   0.0000000000,   0.5996676234, ... 
        0.0000000000,  -0.3233374311,   0.0000000000,   0.1373668119 ];
  list_k{29} = ...
    [   0.0000000000,  -0.3707715395,   0.0000000000,   0.5998464406, ... 
        0.0000000000,  -0.3234434108,   0.0000000000,   0.1373528086 ];
  list_k{30} = ...
    [   0.0000000000,  -0.3707442360,   0.0000000000,   0.5997422934, ... 
        0.0000000000,  -0.3236013563,   0.0000000000,   0.1372623085 ];
  list_k{31} = ...
    [   0.0000000000,  -0.3707692966,   0.0000000000,   0.5998836662, ... 
        0.0000000000,  -0.3237089331,   0.0000000000,   0.1372418343 ];
  list_k{32} = ...
    [   0.0000000000,  -0.3707617366,   0.0000000000,   0.5999739265, ... 
        0.0000000000,  -0.3238258052,   0.0000000000,   0.1372033658 ];
  list_k{33} = ...
    [   0.0000000000,  -0.3707584208,   0.0000000000,   0.6000365958, ... 
        0.0000000000,  -0.3239386791,   0.0000000000,   0.1371632052 ];
  list_k{34} = ...
    [   0.0000000000,  -0.3707549874,   0.0000000000,   0.6000856895, ... 
        0.0000000000,  -0.3240498431,   0.0000000000,   0.1371235729 ];
  list_k{35} = ...
    [   0.0000000000,  -0.3707513842,   0.0000000000,   0.6001261816, ... 
        0.0000000000,  -0.3241591394,   0.0000000000,   0.1370846510 ];
  list_k{36} = ...
    [   0.0000000000,  -0.3707477627,   0.0000000000,   0.6001607572, ... 
        0.0000000000,  -0.3242663762,   0.0000000000,   0.1370468055 ];
  list_k{37} = ...
    [   0.0000000000,  -0.3707434837,   0.0000000000,   0.6001892259, ... 
        0.0000000000,  -0.3243717055,   0.0000000000,   0.1370096796 ];
  list_k{38} = ...
    [   0.0000000000,  -0.3707384023,   0.0000000000,   0.6002136574, ... 
        0.0000000000,  -0.3244750766,   0.0000000000,   0.1369738021 ];
  list_k{39} = ...
    [   0.0000000000,  -0.3707328288,   0.0000000000,   0.6002385132, ... 
        0.0000000000,  -0.3245764668,   0.0000000000,   0.1369408039 ];
  list_k{40} = ...
    [   0.0000000000,  -0.3707325606,   0.0000000000,   0.6002884890, ... 
        0.0000000000,  -0.3246738086,   0.0000000000,   0.1369205575 ];
  list_k{41} = ...
    [   0.0000000000,  -0.3707405782,   0.0000000000,   0.6003117769, ... 
        0.0000000000,  -0.3247681931,   0.0000000000,   0.1368904277 ];
  list_k{42} = ...
    [   0.0000000000,  -0.3707394392,   0.0000000000,   0.6002900488, ... 
        0.0000000000,  -0.3248742637,   0.0000000000,   0.1368424810 ];
  list_k{43} = ...
    [   0.0000000000,  -0.3707266711,   0.0000000000,   0.6002526905, ... 
        0.0000000000,  -0.3249929134,   0.0000000000,   0.1367907258 ];
  list_k{44} = ...
    [   0.0000000000,  -0.3707156592,   0.0000000000,   0.6002288001, ... 
        0.0000000000,  -0.3251044925,   0.0000000000,   0.1367517877 ];
  list_k{45} = ...
    [   0.0000000000,  -0.3707016301,   0.0000000000,   0.6002027234, ... 
        0.0000000000,  -0.3252175743,   0.0000000000,   0.1367123938 ];
  list_k{46} = ...
    [   0.0000000000,  -0.3706633466,   0.0000000000,   0.6001716436, ... 
        0.0000000000,  -0.3253272453,   0.0000000000,   0.1366972606 ];
  list_k{47} = ...
    [   0.0000000000,  -0.3706308487,   0.0000000000,   0.6001316620, ... 
        0.0000000000,  -0.3254368483,   0.0000000000,   0.1366709425 ];
  list_k{48} = ...
    [   0.0000000000,  -0.3706594474,   0.0000000000,   0.6001576370, ... 
        0.0000000000,  -0.3255042492,   0.0000000000,   0.1366622309 ];
  list_k{49} = ...
    [   0.0000000000,  -0.3706421961,   0.0000000000,   0.6001492808, ... 
        0.0000000000,  -0.3255870559,   0.0000000000,   0.1366620204 ];
  list_k{50} = ...
    [   0.0000000000,  -0.3706391454,   0.0000000000,   0.6002041516, ... 
        0.0000000000,  -0.3256574852,   0.0000000000,   0.1366535300 ];
  list_c{1} = ...
    [  -0.0181513599,   0.0741570377,   0.1553705822,   0.1854168707, ... 
       0.2838177304,   0.1912902862,   0.0503194950,   0.0125851555, ... 
       -0.0149810765 ];
  list_c{2} = ...
    [  -0.0197214755,   0.0792287752,   0.1547736382,   0.1840469083, ... 
       0.2870273600,   0.1828447709,   0.0415931828,  -0.0006994604, ... 
       -0.0188803423 ];
  list_c{3} = ...
    [  -0.0223416561,   0.0801281150,   0.1553021915,   0.1817187719, ... 
       0.2883956500,   0.1781184561,   0.0410223208,  -0.0023210033, ... 
       -0.0223077915 ];
  list_c{4} = ...
    [  -0.0235494048,   0.0816599393,   0.1557516568,   0.1813212386, ... 
       0.2836602282,   0.1756012405,   0.0428130451,  -0.0023318991, ... 
       -0.0242902141 ];
  list_c{5} = ...
    [  -0.0214323856,   0.0868616683,   0.1583291320,   0.1823794163, ... 
       0.2750687203,   0.1735239767,   0.0459696631,  -0.0000787644, ... 
       -0.0188561358 ];
  list_c{6} = ...
    [  -0.0193170888,   0.0905614965,   0.1602797503,   0.1824702847, ... 
       0.2712082719,   0.1721799138,   0.0476263204,   0.0024046788, ... 
       -0.0155531220 ];
  list_c{7} = ...
    [  -0.0178169064,   0.0937046229,   0.1619012415,   0.1825897422, ... 
       0.2690608665,   0.1705962783,   0.0484920659,   0.0043373704, ... 
       -0.0132037800 ];
  list_c{8} = ...
    [  -0.0160856065,   0.0961919171,   0.1626354696,   0.1826306513, ... 
       0.2678255721,   0.1696727402,   0.0491850726,   0.0058821355, ... 
       -0.0118011046 ];
  list_c{9} = ...
    [  -0.0144168421,   0.0983270118,   0.1629335177,   0.1825272151, ... 
       0.2671157029,   0.1691978597,   0.0498374103,   0.0070885366, ... 
       -0.0108036563 ];
  list_c{10} = ...
    [  -0.0129162089,   0.1001412293,   0.1630032907,   0.1823807358, ... 
       0.2667117270,   0.1689373037,   0.0503941428,   0.0079203149, ... 
       -0.0100169071 ];
  list_c{11} = ...
    [  -0.0116700744,   0.1017122958,   0.1630495632,   0.1822430336, ... 
       0.2664721522,   0.1687702771,   0.0509202497,   0.0086500749, ... 
       -0.0093536351 ];
  list_c{12} = ...
    [  -0.0106657192,   0.1030138925,   0.1630368961,   0.1820837672, ... 
       0.2663472218,   0.1687246335,   0.0513863110,   0.0092559843, ... 
       -0.0087907514 ];
  list_c{13} = ...
    [  -0.0098378070,   0.1040681469,   0.1629872097,   0.1819002648, ... 
       0.2662679290,   0.1687125815,   0.0517649913,   0.0097589379, ... 
       -0.0083398015 ];
  list_c{14} = ...
    [  -0.0091237578,   0.1049942991,   0.1629047172,   0.1817247154, ... 
       0.2662511715,   0.1687502708,   0.0521096131,   0.0102042740, ... 
       -0.0079536461 ];
  list_c{15} = ...
    [  -0.0085539511,   0.1057419769,   0.1628061170,   0.1815330520, ... 
       0.2662418582,   0.1688215230,   0.0524164424,   0.0106028054, ... 
       -0.0076043154 ];
  list_c{16} = ...
    [  -0.0080777642,   0.1063335297,   0.1627170489,   0.1813349280, ... 
       0.2662165352,   0.1689253722,   0.0526783472,   0.0109602828, ... 
       -0.0072864649 ];
  list_c{17} = ...
    [  -0.0077469099,   0.1066190564,   0.1626473271,   0.1811307349, ... 
       0.2661868363,   0.1691320539,   0.0528903812,   0.0113170790, ... 
       -0.0070303099 ];
  list_c{18} = ...
    [  -0.0075052980,   0.1068597529,   0.1626133545,   0.1809499816, ... 
       0.2661130505,   0.1693448279,   0.0530676178,   0.0115926497, ... 
       -0.0067521002 ];
  list_c{19} = ...
    [  -0.0070902221,   0.1073115313,   0.1625389217,   0.1807539184, ... 
       0.2660328930,   0.1694353677,   0.0532782211,   0.0117802949, ... 
       -0.0064202293 ];
  list_c{20} = ...
    [  -0.0068102118,   0.1075824236,   0.1624667448,   0.1805801026, ... 
       0.2659652815,   0.1695970468,   0.0534558232,   0.0120025327, ... 
       -0.0061527140 ];
  list_c{21} = ...
    [  -0.0065758608,   0.1077814044,   0.1624030162,   0.1804275229, ... 
       0.2659048450,   0.1697709843,   0.0536195453,   0.0121875455, ... 
       -0.0058967202 ];
  list_c{22} = ...
    [  -0.0063916822,   0.1079629490,   0.1623360374,   0.1802882328, ... 
       0.2658433228,   0.1699553702,   0.0537777196,   0.0123722389, ... 
       -0.0056456139 ];
  list_c{23} = ...
    [  -0.0062531939,   0.1080922399,   0.1622852655,   0.1801779182, ... 
       0.2657886324,   0.1701470570,   0.0539208543,   0.0125129806, ... 
       -0.0053974972 ];
  list_c{24} = ...
    [  -0.0060949061,   0.1082251531,   0.1622293725,   0.1800760393, ... 
       0.2657442301,   0.1703276329,   0.0540591334,   0.0126471305, ... 
       -0.0051729922 ];
  list_c{25} = ...
    [  -0.0059237030,   0.1083595957,   0.1621684100,   0.1799780728, ... 
       0.2657098972,   0.1704985791,   0.0541938219,   0.0127833150, ... 
       -0.0049715841 ];
  list_c{26} = ...
    [  -0.0057573106,   0.1084870055,   0.1621070662,   0.1798863678, ... 
       0.2656825839,   0.1706633230,   0.0543236695,   0.0129160989, ... 
       -0.0047835304 ];
  list_c{27} = ...
    [  -0.0054675436,   0.1086576759,   0.1619562692,   0.1797015489, ... 
       0.2656687306,   0.1708707796,   0.0544852803,   0.0132114809, ... 
       -0.0046650251 ];
  list_c{28} = ...
    [  -0.0058519956,   0.1083685649,   0.1620834141,   0.1798136798, ... 
       0.2656294047,   0.1710957448,   0.0545314219,   0.0130066644, ... 
       -0.0043577134 ];
  list_c{29} = ...
    [  -0.0053727846,   0.1087122829,   0.1619387815,   0.1796341426, ... 
       0.2655994826,   0.1712677363,   0.0547534948,   0.0133156632, ... 
       -0.0042116369 ];
  list_c{30} = ...
    [  -0.0056820328,   0.1084925488,   0.1620015134,   0.1796864333, ... 
       0.2655378807,   0.1714762255,   0.0548032702,   0.0132366879, ... 
       -0.0039847447 ];
  list_c{31} = ...
    [  -0.0052545324,   0.1087770118,   0.1618708427,   0.1795460208, ... 
       0.2655391951,   0.1716232206,   0.0549792959,   0.0134823130, ... 
       -0.0038772879 ];
  list_c{32} = ...
    [  -0.0051318139,   0.1088641079,   0.1618143516,   0.1795095501, ... 
       0.2655718061,   0.1716893814,   0.0550430676,   0.0135778412, ... 
       -0.0038212514 ];
  list_c{33} = ...
    [  -0.0050557471,   0.1089065773,   0.1617745828,   0.1794717113, ... 
       0.2655763509,   0.1718007730,   0.0551267283,   0.0136496030, ... 
       -0.0037157593 ];
  list_c{34} = ...
    [  -0.0049740991,   0.1089529884,   0.1617372877,   0.1794367991, ... 
       0.2655810095,   0.1719097163,   0.0552091818,   0.0137169587, ... 
       -0.0036108727 ];
  list_c{35} = ...
    [  -0.0048929032,   0.1089995387,   0.1617018429,   0.1794046681, ... 
       0.2655862638,   0.1720144853,   0.0552881661,   0.0137825007, ... 
       -0.0035119263 ];
  list_c{36} = ...
    [  -0.0048137773,   0.1090451602,   0.1616681730,   0.1793751143, ... 
       0.2655923590,   0.1721153890,   0.0553637092,   0.0138460022, ... 
       -0.0034186069 ];
  list_c{37} = ...
    [  -0.0047393348,   0.1090876303,   0.1616369234,   0.1793488055, ... 
       0.2655993544,   0.1722130594,   0.0554355602,   0.0139054947, ... 
       -0.0033295883 ];
  list_c{38} = ...
    [  -0.0046670846,   0.1091287461,   0.1616069005,   0.1793247117, ... 
       0.2656077385,   0.1723075192,   0.0555043361,   0.0139626068, ... 
       -0.0032455708 ];
  list_c{39} = ...
    [  -0.0045906745,   0.1091732702,   0.1615757694,   0.1793003651, ... 
       0.2656184755,   0.1723981014,   0.0555707048,   0.0140220980, ... 
       -0.0031697109 ];
  list_c{40} = ...
    [  -0.0044781278,   0.1092444406,   0.1615278187,   0.1792611778, ... 
       0.2656371543,   0.1724839694,   0.0556413870,   0.0141080885, ... 
       -0.0031172654 ];
  list_c{41} = ...
    [  -0.0044308281,   0.1092736226,   0.1614963041,   0.1792326684, ... 
       0.2656491516,   0.1725893143,   0.0557137552,   0.0141965031, ... 
       -0.0030456702 ];
  list_c{42} = ...
    [  -0.0044451819,   0.1092556481,   0.1614950130,   0.1792352919, ... 
       0.2656552100,   0.1726830454,   0.0557588150,   0.0142173566, ... 
       -0.0029544166 ];
  list_c{43} = ...
    [  -0.0044492040,   0.1092410241,   0.1614980247,   0.1792500866, ... 
       0.2656661683,   0.1727586630,   0.0557852011,   0.0142045851, ... 
       -0.0028796206 ];
  list_c{44} = ...
    [  -0.0044024488,   0.1092688173,   0.1614857061,   0.1792494119, ... 
       0.2656819329,   0.1728375766,   0.0558284489,   0.0142337573, ... 
       -0.0028245883 ];
  list_c{45} = ...
    [  -0.0043787605,   0.1092799930,   0.1614830100,   0.1792571688, ... 
       0.2656969428,   0.1729096006,   0.0558584802,   0.0142462979, ... 
       -0.0027745733 ];
  list_c{46} = ...
    [  -0.0042851024,   0.1093337747,   0.1615001003,   0.1792694969, ... 
       0.2657197753,   0.1729828162,   0.0558862321,   0.0143012506, ... 
       -0.0027680736 ];
  list_c{47} = ...
    [  -0.0042497784,   0.1093666183,   0.1615011472,   0.1792699550, ... 
       0.2657235717,   0.1730878809,   0.0559411360,   0.0143407387, ... 
       -0.0026938263 ];
  list_c{48} = ...
    [  -0.0042754324,   0.1093946025,   0.1614221961,   0.1792231398, ... 
       0.2657057267,   0.1731674441,   0.0560436017,   0.0143951394, ... 
       -0.0025042912 ];
  list_c{49} = ...
    [  -0.0041646213,   0.1094463959,   0.1614367433,   0.1792164788, ... 
       0.2657430543,   0.1732981101,   0.0561208647,   0.0144132680, ... 
       -0.0024516192 ];
  list_c{50} = ...
    [  -0.0040000129,   0.1095410164,   0.1614035043,   0.1792047332, ... 
       0.2657944347,   0.1733152288,   0.0561325860,   0.0145301177, ... 
       -0.0025257963 ];
else
  maxiter_succ_approx=maxiter_kyp;
endif

for m=1:maxiter_succ_approx,

  % Constant part of the pass band constraint matrix
  Lzm_z=kron(Phi,P_z)+kron(Psi_z,Q_z);
  Uzm_z=[[-eye(n_z),A_z,B_z,zeros(n_z,1)]; ...
         [zeros(1,n_z),C_z,D_z,-1]];
  Vzm_z=[[XYZ_z,zeros((2*n_z)+1,1)]; ...
         [zeros(1,n_z),1]];
  VplusUzm_z=(Uzm_z+(Vzm_z'))/sqrt(2);
  UminusVzm_z=(Uzm_z-(Vzm_z'))/sqrt(2);
  Fzm_z=[[[[Lzm_z,zeros(2*n_z,2)]; ...
           [zeros(1,2*n_z),-Esq_z,0]; ...
           [zeros(1,(2*n_z)+1),1]],(VplusUzm_z')]; ...
         [VplusUzm_z,-eye(n_z+1)]] - ...
        [[(UminusVzm_z')*UminusVzm_z,zeros(2*(n_z+1),n_z+1)]; ...
         [zeros(n_z+1,2*(n_z+1)),zeros(n_z+1)]];

  % Linear part of the pass band constraint matrix
  gLzm_z=zeros(size(Lzm_z));
  gUzm_z=[[zeros(n_z),dA_z,dB_z,zeros(n_z,1)]; ...
          [zeros(1,n_z),dC_z,dD_z,0]];
  gVzm_z=[[dXYZ_z,zeros((2*n_z)+1,1)]; ...
          [zeros(1,n_z),0]];
  gVplusUzm_z=(gUzm_z+(gVzm_z'))/sqrt(2);
  gUminusVzm_z=(gUzm_z-(gVzm_z'))/sqrt(2);
  gFzm_z=[[[[gLzm_z,zeros(2*n_z,2)]; ...
            [zeros(1,2*n_z),-dEsq_z,0]; ...
            [zeros(1,(2*n_z)+1),0]],(gVplusUzm_z')]; ...
          [gVplusUzm_z,zeros(n_z+1)]] - ...
         [[(gUminusVzm_z')*UminusVzm_z,zeros(2*(n_z+1),n_z+1)]; ...
          [zeros(n_z+1,2*(n_z+1)),zeros(n_z+1)]] - ...
         [[(UminusVzm_z')*gUminusVzm_z,zeros(2*(n_z+1),n_z+1)]; ...
          [zeros(n_z+1,2*(n_z+1)),zeros(n_z+1)]];
  
  % Construct pass band constraint matrix
  bFzm_z=Fzm_z+gFzm_z;

  % Constant part of the stop band constraint matrix
  Lzm_s=kron(Phi,P_s)+kron(Psi_s,Q_s);
  Uzm_s=[[-eye(n_s),A_s,B_s,zeros(n_s,1)]; ...
         [zeros(1,n_s),C_s,D_s,-1]];
  Vzm_s=[[XYZ_s,zeros((2*n_s)+1,1)]; ...
         [zeros(1,n_s),1]];
  VplusUzm_s=(Uzm_s+(Vzm_s'))/sqrt(2);
  UminusVzm_s=(Uzm_s-(Vzm_s'))/sqrt(2);
  Fzm_s=[[[[Lzm_s,zeros(2*n_s,2)]; ...
           [zeros(1,2*n_s),-Esq_s,0]; ...
           [zeros(1,(2*n_s)+1),1]],(VplusUzm_s')]; ...
         [VplusUzm_s,-eye(n_s+1)]] - ...
        [[(UminusVzm_s')*UminusVzm_s,zeros(2*(n_s+1),n_s+1)]; ...
         [zeros(n_s+1,2*(n_s+1)),zeros(n_s+1)]];

  % Linear part of the stop band constraint matrix
  gLzm_s=zeros(size(Lzm_s));
  gUzm_s=[[zeros(n_s),dA_s,dB_s,zeros(n_s,1)]; ...
          [zeros(1,n_s),dC_s,dD_s,0]];
  gVzm_s=[[dXYZ_s,zeros((2*n_s)+1,1)]; ...
          [zeros(1,n_s),0]];
  gVplusUzm_s=(gUzm_s+(gVzm_s'))/sqrt(2);
  gUminusVzm_s=(gUzm_s-(gVzm_s'))/sqrt(2);
  gFzm_s=[[[[gLzm_s,zeros(2*n_s,2)]; ...
            [zeros(1,2*n_s),-dEsq_s,0]; ...
            [zeros(1,(2*n_s)+1),0]],(gVplusUzm_s')]; ...
          [gVplusUzm_s,zeros(n_s+1)]] - ...
         [[(gUminusVzm_s')*UminusVzm_s,zeros(2*(n_s+1),n_s+1)]; ...
          [zeros(n_s+1,2*(n_s+1)),zeros(n_s+1)]] - ...
         [[(UminusVzm_s')*gUminusVzm_s,zeros(2*(n_s+1),n_s+1)]; ...
          [zeros(n_s+1,2*(n_s+1)),zeros(n_s+1)]];

  % Construct stop band constraint matrix
  bFzm_s=Fzm_s+gFzm_s;
  
  if m==1,
    printf("rows(Lzm_z)=%d\n",rows(Lzm_z));
    printf("rows(Fzm_z)=%d\n",rows(Fzm_z));
    printf("rows(Lzm_s)=%d\n",rows(Lzm_s));
    printf("rows(Fzm_s)=%d\n",rows(Fzm_s));
  endif

  % Solve for the SDP variables
  rho=10^floor(log10(norm(Esq_z+Was*Esq_s)));
  printf("Using rho=%g, Esq_z=%g, Esq_s=%g\n",rho,Esq_z,Esq_s);
  Objective=norm(Esq_z+dEsq_z)+Was*norm(Esq_s+dEsq_s)+real(rho*norm(dz)^2);
  Constraints=[ (-k_max)<=(k+dk)<=k_max, ...
                bFzm_z<=tol,    Q_z>=0, ...
                bFzm_s<=tol,    Q_s>=0 ];
  Options=sdpsettings("solver","sdpt3","maxit",200,"gaptol",tol);
  sol=optimize(Constraints,Objective,Options)
  if sol.problem
    error("YALMIP failed");
  endif

  % Sanity checks
  check(Constraints)
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Main loop update
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  % Update coefficients
  k=k+value(dk);
  c=c+value(dc);

  % Update state transition matrix
  A=ABCD0(1:rows(A0),1:columns(A0));
  B=ABCD0(1:rows(A0),columns(A0)+1);
  C=ABCD0(rows(A0)+1,1:columns(A0));
  D=ABCD0(rows(A0)+1,columns(A0)+1);
  for mm=1:nN,
    A=A+(k(mm)*Ak{mm});
    B=B+(k(mm)*Bk{mm});
    C=C+(k(mm)*Ck{mm});
    D=D+(k(mm)*Dk{mm});
  endfor
  for mm=1:(nN+1),
    A=A+(c(mm)*Ac{mm});
    B=B+(c(mm)*Bc{mm});
    C=C+(c(mm)*Cc{mm});
    D=D+(c(mm)*Dc{mm});
  endfor
  A_s=A;
  B_s=B;
  C_s=C;
  D_s=D;
  A_z=[[A,zeros(rows(A),columns(Adelay))]; ...
       [zeros(rows(Adelay),columns(A)),Adelay]];
  B_z=[B;Bdelay];
  C_z=[C,-Cdelay];
  D_z=(D-Ddelay);

  % Update pass band SDP variables
  Esq_z=Esq_z+value(dEsq_z);
  XYZ_z=XYZ_z+value(dXYZ_z);

  % Update stop band SDP variables
  Esq_s=Esq_s+value(dEsq_s);
  XYZ_s=XYZ_s+value(dXYZ_s);

  printf("m=%d : Esq_z=%g, dEsq_z=%g, Esq_s=%g, dEsq_s=%g\n", ...
         m,Esq_z,value(dEsq_z),Esq_s,value(dEsq_s));

  printf("value(Objective)=%g\n",value(Objective));

  printf("norm(value(dz))=%g\n",norm(value(dz)));
  printf("norm(value(dkc))=%g\n",norm(value(dkc)));

  print_polynomial(value(dk),"dk","%g");
  print_polynomial(k,"k","%g");

  print_polynomial(value(dc),"dc","%g");
  print_polynomial(c,"c","%g");

  Asq=schurOneMlatticeAsq(w,k,k0_ones,k0_ones,c);
  printf("10*log10(max(Asq(pass)))=%g dB\n",10*log10(max(Asq(1:nap))));
  printf("10*log10(min(Asq(pass)))=%g dB\n",10*log10(min(Asq(1:nap))));
  printf("10*log10(max(Asq(stop)))=%g dB\n",10*log10(max(Asq(nas:end))));

  [Esq,gradEsq]=schurOneMlatticeEsq(k,k0_ones,k0_ones,c,wa,Asqd,Wa);
  printf("Esq=%g\n",Esq);
  print_polynomial(gradEsq,"gradEsq","%g");
  printf("\n");

  list_Objective=[list_Objective;value(Objective)];
  list_norm_dz=[list_norm_dz;norm(value(dz))];
  list_norm_dkc=[list_norm_dkc;norm(value(dkc))];
  list_Esq=[list_Esq;Esq];
  list_Esq_z=[list_Esq_z;Esq_z];
  list_Esq_s=[list_Esq_s;Esq_s]; 
  list_Asq_max_pass=[list_Asq_max_pass;max(Asq(1:nap))];
  list_Asq_min_pass=[list_Asq_min_pass;min(Asq(1:nap))];
  list_Asq_max_stop=[list_Asq_max_stop;max(Asq(nas:end))];
  list_k{length(list_k)+1}=k;
  list_c{length(list_c)+1}=c;

  % Exit criterion
  if norm(value(dz)) < tol
    break;
  elseif m==maxiter_kyp
    warning("Exiting at maxiter_kyp!");
    break;
  endif

endfor
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Finish
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Find all-pass denominator polynomial
[n1,d1R]=schurOneMlattice2tf(k,k0_ones,k0_ones,c);

Asq1=schurOneMlatticeAsq(w,k,k0_ones,k0_ones,c);
printf("10*log10(max(Asq(pass)))=%g dB\n",10*log10(max(Asq(1:nap))));
printf("10*log10(min(Asq(pass)))=%g dB\n",10*log10(min(Asq(1:nap))));
printf("10*log10(max(Asq(stop)))=%g dB\n",10*log10(max(Asq(nas:end))));

T1=schurOneMlatticeT(w,k,k0_ones,k0_ones,c);
printf("min(T1(pass))=%g,max(T1(pass))=%g\n",min(T1(1:nap)),max(T1(1:nap)));

[Esq,gradEsq]=schurOneMlatticeEsq(k0,k0_ones,k0_ones,c0,wa,Asqd,Wa);
printf("Esq=%g\n",Esq);
print_polynomial(gradEsq,"gradEsq","%g");

% Plot response
subplot(211)
[ax,h1,h2]=plotyy(f,10*log10(Asq1),f,10*log10(Asq1));
ylabel("Amplitude(dB)");
axis(ax(1),[0 0.5 -1 1]);
axis(ax(2),[0 0.5 -50 -30]);
grid("on");
strP=sprintf(["Response of tapped Schur lattice filter : ", ...
              "nN=%d, fap=%g, tp=%g, fas=%g"], nN,fap,tp,fas);
title(strP);
subplot(212)
plot(f,T1);
ylabel("Delay(samples)");
axis([0 0.5 0 20]);
grid("on");
xlabel("Frequency");
print(strcat(strf,"_response"),"-dpdflatex");
close

% Plot convergence
list_len=length(list_norm_dkc);
if list_len ~= length(list_Esq)
  error("list_len ~= length(list_Esq)");
endif
[ax,h1,h2]=plotyy(1:list_len,list_norm_dkc,1:list_len,list_Esq);
set(h1,"linestyle","-");
set(h2,"linestyle","-.");
legend("$\\mathnorm{\\Delta_{\\boldsymbol{x}}}$","$\\mathcal{E}^2$");
legend("box","off");
legend("location","northeast");
ylabel(ax(1),"$\\mathnorm{\\Delta_{\\boldsymbol{x}}}$");
ylabel(ax(2),"$\\mathcal{E}^2$");
xlabel("Iteration");
axis(ax(1),[0 list_len 0 0.03]);
axis(ax(2),[0 list_len 0 0.015]);
grid("on");
strP=sprintf(["Convergence of tapped Schur lattice filter : ", ...
              "nN=%d, fap=%g, tp=%g, fas=%g"], nN,fap,tp,fas);
title(strP);
print(strcat(strf,"_convergence"),"-dpdflatex");
close

% Plot amplitude min,max
list_len=length(list_Asq_min_pass);
if list_len ~= length(list_Asq_max_stop)
  error("list_len ~= length(list_Asq_max_stop)");
endif
[ax,h1,h2]=plotyy(1:list_len,10*log10(list_Asq_min_pass), ...
                  1:list_len,10*log10(list_Asq_max_stop));
set(h1,"linestyle","-");
set(h2,"linestyle","-.");
legend("$A_{min}$(dB)","$A_{max}$(dB)");
legend("box","off");
legend("location","north");
ylabel(ax(1),"Minimum Amplitude(dB)");
ylabel(ax(2),"Maximum Amplitude(dB)");
axis(ax(1),[0 list_len -1.4 0]);
axis(ax(2),[0 list_len -42 -28]);
xlabel("Iteration");
grid("on");
strP=sprintf(["Pass-band $A_{min}$(dB) and stop-band $A_{max}$(dB) of ", ...
              "tapped Schur lattice filter and delay : ", ...
              "nN=%d, fap=%g, tp=%g, fas=%g"], ...
             nN,fap,tp,fas);
title(strP);
print(strcat(strf,"_Asq_min_max"),"-dpdflatex");
close

% Plot poles and zeros
zplane(roots(n1),roots(d1R));
strP=sprintf(["Pole-zero plot of tapped Schur lattice filter : ", ...
              "nN=%d, fap=%g, tp=%g, fas=%g"], ...
             nN,fap,tp,fas);
title(strP);
grid("on");
print(strcat(strf,"_pz"),"-dpdflatex");
close

% Save the results
fid=fopen(strcat(strf,"_spec.m"),"wt");
fprintf(fid,"tol=%g %% General tolerance\n",tol);
fprintf(fid,"maxiter_kyp=%d %% Maximum number of KYP iterations\n",maxiter_kyp);
fprintf(fid,"nN=%d %% Tapped Schur lattice filter order\n",nN);
fprintf(fid,"fap=%g %% Amplitude pass band edge\n",fap);
fprintf(fid,"fas=%g %% Amplitude stop band edge\n",fas);
fprintf(fid,"Was=%d %% Amplitude stop band weight\n",Was);
fprintf(fid,"tp=%g %% Nominal pass band group-delay(samples)\n",tp);
fclose(fid);

print_polynomial(n0,"n0");
print_polynomial(n0,"n0",strcat(strf,"_n0_coef.m"));
print_polynomial(d0R,"d0R");
print_polynomial(d0R,"d0R",strcat(strf,"_d0R_coef.m"));
print_polynomial(k0,"k0");
print_polynomial(k0,"k0",strcat(strf,"_k0_coef.m"));
print_polynomial(c0,"c0");
print_polynomial(c0,"c0",strcat(strf,"_c0_coef.m"));
print_polynomial(k,"k");
print_polynomial(k,"k",strcat(strf,"_k_coef.m"));
print_polynomial(c,"c");
print_polynomial(c,"c",strcat(strf,"_c_coef.m"));
print_polynomial(n1,"n1");
print_polynomial(n1,"n1",strcat(strf,"_n1_coef.m"));
print_polynomial(d1R,"d1R");
print_polynomial(d1R,"d1R",strcat(strf,"_d1R_coef.m"));

print_polynomial(list_Objective,"list_Objective");
print_polynomial(list_norm_dz,"list_norm_dz");
print_polynomial(list_norm_dkc,"list_norm_dkc");
print_polynomial(list_Esq,"list_Esq");
print_polynomial(list_Esq_z,"list_Esq_z");
print_polynomial(list_Esq_s,"list_Esq_s");
print_polynomial(list_Asq_max_pass,"list_Asq_max_pass");
print_polynomial(list_Asq_min_pass,"list_Asq_min_pass");
print_polynomial(list_Asq_max_stop,"list_Asq_max_stop");
for u=1:length(list_k)
  print_polynomial(list_k{u},sprintf("list_k{%d}",u));
endfor
for u=1:length(list_c)
  print_polynomial(list_c{u},sprintf("list_c{%d}",u));
endfor

eval(sprintf(["save %s.mat n tol nN R use_best_k_found maxiter_kyp ", ...
              "fap fas Was tp k0 c0 n0 d0R k c n1 d1R"], strf));

% Done
toc;
diary off
movefile(strcat(strf,".diary.tmp"),strcat(strf,".diary"));
