% schurOneMPAlatticeDoublyPipelinedDelay_kyp_LeeHu_lowpass_test.m
% Copyright (C) 2024-2025 Robert G. Jenssen
%
% Design a Schur one-multiplier all-pass filter with the Finsler
% transformation of the KYP lemma and the BMI convex over-approximation
% of Lee and Hu. See: "A sequential parametric convex approximation method
% for solving bilinear matrix inequalities", D. Lee and J. Hu, July, 2016,
% https://engineering.purdue.edu/~jianghai/Publication/OPTL2018_BMI.pdf
%
% m    rows(A)     rows(F)        rows(S)        rows(bF)
%    2*((N+D)+2)  2*rows(A)+2    rows(A)+1   4*(rows(A)+1) [16*m+12]
% 4      18          38             19               76
% 5      22          46             23               92
% 6      26          54             27              108
% 7      30          62             31              124
% 8      34          68             35              140

test_common;

strf="schurOneMPAlatticeDoublyPipelinedDelay_kyp_LeeHu_lowpass_test";

delete(strcat(strf,".diary"));
delete(strcat(strf,".diary.tmp"));
eval(sprintf("diary %s.diary.tmp",strf));

tic;

schurOneMPAlatticeDoublyPipelinedDelay_kyp_lowpass_common_start;

use_best_k_found=true;
use_hessEsq=true
maxiter_kyp=50;

S_p=eye(n+1);
S_s=eye(n+1);

dS_p=sdpvar(n+1,n+1,"symmetric","real");
dS_s=sdpvar(n+1,n+1,"symmetric","real");

if ~use_best_k_found
  maxiter_succ_approx=maxiter_kyp;
else
  maxiter_succ_approx=0;
  printf("\n\nUsing best k found!\n\n");
% 10*log10(min(Asq))(pass)=-0.154794,10*log10(max(Asq))(stop)=-42.5413
Esq=3.39892e-06
gradEsq = [ -0.00011933, -0.000122984, 2.63957e-05, -3.84668e-06, ... 
            -7.78104e-05 ];
diagHessEsq = [ 0.0262919, 0.0407422, 0.0423966, 0.0352724, ... 
                0.046704 ];
Da0 = [   1.0000000000,  -0.7135065959,   0.2321721382,   0.1490500249, ... 
          0.0712710757,   0.0216280074 ]';
k0 = [  -0.5887890122,   0.3794825489,   0.2077136416,   0.0867433777, ... 
         0.0216280074 ];
k = [  -0.5598090941,   0.4108251626,   0.2231966481,   0.0898728112, ... 
        0.0164139680 ];
list_Objective = ...
  [   0.0000362112,   0.0000309797,   0.0000267075,   0.0000231639, ... 
      0.0000202010,   0.0000176523,   0.0000155181,   0.0000136595, ... 
      0.0000122259,   0.0000109289,   0.0000097655,   0.0000088080, ... 
      0.0000079555,   0.0000072347,   0.0000068327,   0.0000061413, ... 
      0.0000059082,   0.0000053690,   0.0000051670,   0.0000048939, ... 
      0.0000047163,   0.0000045547,   0.0000042670,   0.0000040894, ... 
      0.0000040382,   0.0000039119,   0.0000038882,   0.0000037357, ... 
      0.0000036792,   0.0000036880,   0.0000036686,   0.0000036167, ... 
      0.0000035306,   0.0000034803,   0.0000035081,   0.0000034523, ... 
      0.0000034161,   0.0000034049,   0.0000033958,   0.0000033886, ... 
      0.0000033791,   0.0000033694,   0.0000033227,   0.0000033634, ... 
      0.0000033716,   0.0000033790,   0.0000033864,   0.0000033928, ... 
      0.0000033725,   0.0000034026 ]';
list_norm_dz = ...
  [   0.0176596306,   0.0284380276,   0.0160082687,   0.0228612688, ... 
      0.0380571952,   0.0271561607,   0.0259269583,   0.0165466527, ... 
      0.0189389142,   0.0179416589,   0.0212751468,   0.1154745734, ... 
      0.0744935927,   0.0639475882,   0.0927789846,   0.0707448228, ... 
      0.0908081171,   0.0472888505,   0.0763138500,   0.0713751972, ... 
      0.0517020721,   0.0511909062,   0.0342343562,   0.0258747653, ... 
      0.0380632077,   0.0249831449,   0.0406124098,   0.0202617022, ... 
      0.0289678467,   0.0390403348,   0.0368892151,   0.0235304749, ... 
      0.0128493995,   0.0135134748,   0.0382214091,   0.0148441832, ... 
      0.0141450566,   0.0169017825,   0.0195827258,   0.0221876294, ... 
      0.0227076012,   0.0227595857,   0.0103857415,   0.0538386329, ... 
      0.0603241812,   0.0642076775,   0.0669825307,   0.0682229333, ... 
      0.0190453773,   0.0610024003 ]';
list_norm_dk = ...
  [   0.0038416393,   0.0032734419,   0.0029627027,   0.0027768172, ... 
      0.0025770410,   0.0025046844,   0.0023476928,   0.0023160334, ... 
      0.0018904380,   0.0019407497,   0.0019530406,   0.0017695524, ... 
      0.0017502071,   0.0016215136,   0.0009229935,   0.0018848833, ... 
      0.0006136121,   0.0017597928,   0.0006193272,   0.0009686094, ... 
      0.0006895874,   0.0006180447,   0.0012684425,   0.0008324765, ... 
      0.0003361144,   0.0006720268,   0.0003335350,   0.0009166575, ... 
      0.0003136672,   0.0002844806,   0.0001639506,   0.0003192980, ... 
      0.0005768565,   0.0003202463,   0.0003667645,   0.0004041708, ... 
      0.0002366248,   0.0001437723,   0.0001200843,   0.0001018592, ... 
      0.0000948135,   0.0000906393,   0.0003475638,   0.0003806992, ... 
      0.0000778999,   0.0000683587,   0.0000651382,   0.0000542600, ... 
      0.0001270741,   0.0001977608 ]';
list_Esq = ...
  [   0.0000362166,   0.0000309681,   0.0000266970,   0.0000231519, ... 
      0.0000201808,   0.0000176402,   0.0000155077,   0.0000136534, ... 
      0.0000122206,   0.0000109239,   0.0000097593,   0.0000087935, ... 
      0.0000079489,   0.0000072298,   0.0000068239,   0.0000061352, ... 
      0.0000058999,   0.0000053660,   0.0000051611,   0.0000048887, ... 
      0.0000047136,   0.0000045521,   0.0000042655,   0.0000040886, ... 
      0.0000040366,   0.0000039113,   0.0000038865,   0.0000037353, ... 
      0.0000036783,   0.0000036865,   0.0000036672,   0.0000036162, ... 
      0.0000035305,   0.0000034801,   0.0000035066,   0.0000034521, ... 
      0.0000034159,   0.0000034046,   0.0000033954,   0.0000033881, ... 
      0.0000033786,   0.0000033689,   0.0000033226,   0.0000033605, ... 
      0.0000033679,   0.0000033749,   0.0000033819,   0.0000033882, ... 
      0.0000033721,   0.0000033989 ]';
list_Esq_p = ...
  [   0.1181533128,   0.1151687780,   0.1119937740,   0.1086532431, ... 
      0.1051371332,   0.1016883270,   0.0982714249,   0.0949770313, ... 
      0.0917352040,   0.0886199435,   0.0856444339,   0.0826653630, ... 
      0.0797869228,   0.0770591792,   0.0745442812,   0.0721430283, ... 
      0.0700232773,   0.0679351222,   0.0659592611,   0.0641447634, ... 
      0.0625908221,   0.0611383024,   0.0600574832,   0.0589892687, ... 
      0.0580657108,   0.0571425214,   0.0563519730,   0.0552831258, ... 
      0.0544280795,   0.0539218804,   0.0534521955,   0.0529729956, ... 
      0.0524757161,   0.0520162694,   0.0516116576,   0.0511884581, ... 
      0.0508060560,   0.0504822060,   0.0502007674,   0.0499564486, ... 
      0.0497365763,   0.0495359429,   0.0492850954,   0.0491444103, ... 
      0.0490230049,   0.0489144682,   0.0488143619,   0.0487237652, ... 
      0.0486227168,   0.0485473279 ]';
list_Esq_s = ...
  [   0.0000599414,   0.0000598283,   0.0000597875,   0.0000597580, ... 
      0.0000596988,   0.0000596489,   0.0000596023,   0.0000595771, ... 
      0.0000594330,   0.0000592829,   0.0000591764,   0.0000590059, ... 
      0.0000588389,   0.0000586637,   0.0000582972,   0.0000581198, ... 
      0.0000573876,   0.0000570939,   0.0000562538,   0.0000554437, ... 
      0.0000546553,   0.0000537031,   0.0000530963,   0.0000525905, ... 
      0.0000517750,   0.0000511386,   0.0000501951,   0.0000498889, ... 
      0.0000490637,   0.0000480957,   0.0000471683,   0.0000464618, ... 
      0.0000459917,   0.0000455257,   0.0000447183,   0.0000443309, ... 
      0.0000439881,   0.0000436256,   0.0000432480,   0.0000428579, ... 
      0.0000424675,   0.0000420840,   0.0000416731,   0.0000410777, ... 
      0.0000405000,   0.0000399758,   0.0000395048,   0.0000391746, ... 
      0.0000388237,   0.0000385579 ]';
list_Asq_min = ...
  [   0.8866203660,   0.8941128953,   0.9008735929,   0.9069910927, ... 
      0.9125471882,   0.9177363875,   0.9224323609,   0.9269218823, ... 
      0.9304584911,   0.9339735654,   0.9373985269,   0.9403736445, ... 
      0.9432787038,   0.9458754280,   0.9473167634,   0.9501333723, ... 
      0.9509925191,   0.9535411485,   0.9544043517,   0.9557458646, ... 
      0.9566744997,   0.9574871048,   0.9591563731,   0.9602745318, ... 
      0.9604727675,   0.9613580731,   0.9613997063,   0.9625818005, ... 
      0.9628510032,   0.9627466737,   0.9628859631,   0.9632901229, ... 
      0.9640178417,   0.9643835528,   0.9640697672,   0.9645728047, ... 
      0.9648480634,   0.9649204858,   0.9649873634,   0.9650437803, ... 
      0.9651249682,   0.9652093926,   0.9656312501,   0.9652287695, ... 
      0.9651769261,   0.9651303845,   0.9650823883,   0.9650398703, ... 
      0.9651959805,   0.9649850742 ]';
list_Asq_max = ...
  [   0.0000327918,   0.0000432231,   0.0000513163,   0.0000545527, ... 
      0.0000556593,   0.0000581600,   0.0000596116,   0.0000634642, ... 
      0.0000596709,   0.0000592288,   0.0000599420,   0.0000578488, ... 
      0.0000594591,   0.0000594839,   0.0000558624,   0.0000566677, ... 
      0.0000544920,   0.0000552135,   0.0000565149,   0.0000569194, ... 
      0.0000566437,   0.0000577941,   0.0000573299,   0.0000580889, ... 
      0.0000588568,   0.0000590113,   0.0000589503,   0.0000586302, ... 
      0.0000594069,   0.0000587902,   0.0000584661,   0.0000584375, ... 
      0.0000584759,   0.0000585620,   0.0000581560,   0.0000580936, ... 
      0.0000581478,   0.0000579326,   0.0000577205,   0.0000575209, ... 
      0.0000573787,   0.0000572572,   0.0000575334,   0.0000571530, ... 
      0.0000568782,   0.0000566266,   0.0000563943,   0.0000561862, ... 
      0.0000561428,   0.0000557024 ]';
list_k{1} = ...
  [  -0.5873303595,   0.3808049427,   0.2107260263,   0.0870941398, ... 
     0.0203301999 ];
list_k{2} = ...
  [  -0.5853832634,   0.3824882471,   0.2126828039,   0.0871077610, ... 
     0.0198187699 ];
list_k{3} = ...
  [  -0.5834227201,   0.3842707942,   0.2139228756,   0.0868711867, ... 
     0.0194154610 ];
list_k{4} = ...
  [  -0.5815141302,   0.3859883774,   0.2148979130,   0.0865357398, ... 
     0.0191816159 ];
list_k{5} = ...
  [  -0.5796425288,   0.3875795516,   0.2156215981,   0.0862887698, ... 
     0.0190343104 ];
list_k{6} = ...
  [  -0.5778725289,   0.3891603797,   0.2163703630,   0.0860914449, ... 
     0.0188295153 ];
list_k{7} = ...
  [  -0.5762588018,   0.3907093299,   0.2170563720,   0.0859915810, ... 
     0.0186630269 ];
list_k{8} = ...
  [  -0.5746639719,   0.3922039653,   0.2177878733,   0.0859296528, ... 
     0.0184447065 ];
list_k{9} = ...
  [  -0.5733410123,   0.3935126804,   0.2181188381,   0.0859639581, ... 
     0.0184355309 ];
list_k{10} = ...
  [  -0.5720482369,   0.3948742126,   0.2185867416,   0.0860262852, ... 
     0.0182989567 ];
list_k{11} = ...
  [  -0.5707832100,   0.3962527491,   0.2191116471,   0.0861281050, ... 
     0.0181321672 ];
list_k{12} = ...
  [  -0.5695900668,   0.3975162290,   0.2194037784,   0.0861845320, ... 
     0.0179811082 ];
list_k{13} = ...
  [  -0.5684476482,   0.3987282450,   0.2199090635,   0.0862775311, ... 
     0.0178224885 ];
list_k{14} = ...
  [  -0.5674234659,   0.3999000700,   0.2203183905,   0.0864248445, ... 
     0.0176885733 ];
list_k{15} = ...
  [  -0.5667660572,   0.4005349170,   0.2204246858,   0.0864395600, ... 
     0.0177605801 ];
list_k{16} = ...
  [  -0.5656844873,   0.4019543485,   0.2209295188,   0.0866787874, ... 
     0.0175236839 ];
list_k{17} = ...
  [  -0.5652408139,   0.4023634965,   0.2208651625,   0.0867267393, ... 
     0.0176000416 ];
list_k{18} = ...
  [  -0.5642166549,   0.4036290162,   0.2214884381,   0.0868631274, ... 
     0.0174016609 ];
list_k{19} = ...
  [  -0.5638034865,   0.4040784139,   0.2214951521,   0.0869594058, ... 
     0.0174414739 ];
list_k{20} = ...
  [  -0.5632427770,   0.4048189849,   0.2217080111,   0.0871060905, ... 
     0.0173490708 ];
list_k{21} = ...
  [  -0.5628907768,   0.4053436815,   0.2219078477,   0.0872809666, ... 
     0.0172728888 ];
list_k{22} = ...
  [  -0.5625412168,   0.4058260359,   0.2219710092,   0.0874252088, ... 
     0.0172246592 ];
list_k{23} = ...
  [  -0.5617715649,   0.4067572733,   0.2222415855,   0.0875712979, ... 
     0.0169905103 ];
list_k{24} = ...
  [  -0.5612561848,   0.4073395356,   0.2225274160,   0.0876394309, ... 
     0.0169454559 ];
list_k{25} = ...
  [  -0.5612266748,   0.4075689582,   0.2224181440,   0.0878570750, ... 
     0.0169328871 ];
list_k{26} = ...
  [  -0.5608131353,   0.4080147573,   0.2226970100,   0.0878966664, ... 
     0.0168825429 ];
list_k{27} = ...
  [  -0.5608788680,   0.4081855283,   0.2225529677,   0.0881336470, ... 
     0.0168533184 ];
list_k{28} = ...
  [  -0.5603087704,   0.4087725201,   0.2229386088,   0.0881999861, ... 
     0.0167207651 ];
list_k{29} = ...
  [  -0.5601978164,   0.4090258710,   0.2228430547,   0.0883119355, ... 
     0.0167057194 ];
list_k{30} = ...
  [  -0.5603594901,   0.4090739441,   0.2227802547,   0.0885321424, ... 
     0.0167124205 ];
list_k{31} = ...
  [  -0.5603387419,   0.4091903077,   0.2228076039,   0.0886402226, ... 
     0.0166905228 ];
list_k{32} = ...
  [  -0.5601458872,   0.4094094029,   0.2229187142,   0.0886852287, ... 
     0.0166416907 ];
list_k{33} = ...
  [  -0.5597777260,   0.4097815280,   0.2231386537,   0.0887320630, ... 
     0.0165512648 ];
list_k{34} = ...
  [  -0.5596280010,   0.4100367968,   0.2231862967,   0.0888389752, ... 
     0.0165155174 ];
list_k{35} = ...
  [  -0.5598875890,   0.4099949690,   0.2230172847,   0.0890258731, ... 
     0.0165589319 ];
list_k{36} = ...
  [  -0.5596264328,   0.4102401668,   0.2231908995,   0.0890460253, ... 
     0.0164919892 ];
list_k{37} = ...
  [  -0.5595020264,   0.4104266876,   0.2232270938,   0.0891048140, ... 
     0.0164610352 ];
list_k{38} = ...
  [  -0.5595166935,   0.4105204344,   0.2232230467,   0.0892126790, ... 
     0.0164570769 ];
list_k{39} = ...
  [  -0.5595245345,   0.4105986618,   0.2232248995,   0.0893030391, ... 
     0.0164486598 ];
list_k{40} = ...
  [  -0.5595309774,   0.4106634387,   0.2232275101,   0.0893806948, ... 
     0.0164386330 ];
list_k{41} = ...
  [  -0.5595147882,   0.4107320485,   0.2232402641,   0.0894412545, ... 
     0.0164248473 ];
list_k{42} = ...
  [  -0.5594927797,   0.4107990637,   0.2232543616,   0.0894943840, ... 
     0.0164100622 ];
list_k{43} = ...
  [  -0.5592484334,   0.4110136471,   0.2233620197,   0.0894864585, ... 
     0.0163517841 ];
list_k{44} = ...
  [  -0.5595317845,   0.4108877648,   0.2231881934,   0.0896129632, ... 
     0.0164025646 ];
list_k{45} = ...
  [  -0.5595867791,   0.4108760611,   0.2231803020,   0.0896662699, ... 
     0.0164007959 ];
list_k{46} = ...
  [  -0.5596360407,   0.4108639464,   0.2231765206,   0.0897119324, ... 
     0.0164005077 ];
list_k{47} = ...
  [  -0.5596843128,   0.4108499275,   0.2231725426,   0.0897531480, ... 
     0.0164018125 ];
list_k{48} = ...
  [  -0.5597252132,   0.4108360721,   0.2231694528,   0.0897858524, ... 
     0.0164022771 ];
list_k{49} = ...
  [  -0.5596528980,   0.4109194610,   0.2232258929,   0.0898082848, ... 
     0.0163856658 ];
list_k{50} = ...
  [  -0.5598090941,   0.4108251626,   0.2231966481,   0.0898728112, ... 
     0.0164139680 ];
endif

for m=1:maxiter_succ_approx,

  % Constant part of the pass band constraint matrix
  Lzm_p=kron(Phi,P_p)+kron(Psi_p,Q_p);
  Uzm_p=[[-eye(n),A,B,zeros(n,1)]; ...
         [zeros(1,n),C_p,D,-1]];
  Vzm_p=[[XYZ_p,zeros((2*n)+1,1)]; ...
         [zeros(1,n),1]];
  VUzm_p=Vzm_p*Uzm_p;
  Fzm_p=[[Lzm_p,zeros(2*n,2)]; ...
         [zeros(1,2*n),-Esq_p,0]; ...
         [zeros(1,(2*n)+1),1]] + ...
        VUzm_p + (VUzm_p');

  % Linear part of the pass band constraint matrix
  gLzm_p=zeros(size(Lzm_p));
  gUzm_p=[[zeros(n),dA,zeros(n,1),zeros(n,1)]; ...
          [zeros(1,n),zeros(1,n),0,0]];
  gVzm_p=[[dXYZ_p,zeros((2*n)+1,1)]; ...
          [zeros(1,n),0]];
  gVUzm_p=(gVzm_p*Uzm_p)+(Vzm_p*gUzm_p);
  gFzm_p=[[gLzm_p,zeros(2*n,1),zeros(2*n,1)]; ...
          [zeros(1,2*n),-dEsq_p,0]; ...
          [zeros(1,2*n),0,0]] + ...
         gVUzm_p + (gVUzm_p');

  % Construct pass band constraint matrix
  SgVzm_p=S_p*(gVzm_p');
  bFzm_p=[[(Fzm_p+gFzm_p),(SgVzm_p'),gUzm_p']; ...
          [SgVzm_p,(-(2*S_p)+dS_p),zeros(n+1)]; ...
          [gUzm_p,zeros(n+1),-dS_p]];

  % Constant part of the stop band constraint matrix
  Lzm_s=kron(Phi,P_s)+kron(Psi_s,Q_s);
  Uzm_s=[[-eye(n),A,B,zeros(n,1)]; ...
         [zeros(1,n),C_s,D,-1]];
  Vzm_s=[[XYZ_s,zeros((2*n)+1,1)]; ...
         [zeros(1,n),1]];
  VUzm_s=Vzm_s*Uzm_s;
  Fzm_s=[[Lzm_s,zeros(2*n,2)]; ...
         [zeros(1,2*n),-Esq_s,0]; ...
         [zeros(1,(2*n)+1),1]] + ...
        VUzm_s + (VUzm_s');

  % Linear part of the stop band constraint matrix
  gLzm_s=zeros(size(Lzm_s));
  gUzm_s=[[zeros(n),dA,zeros(n,1),zeros(n,1)]; ...
          [zeros(1,n),zeros(1,n),0,0]];
  gVzm_s=[[dXYZ_s,zeros((2*n)+1,1)]; ...
          [zeros(1,n),0]];
  gVUzm_s=(gVzm_s*Uzm_s)+(Vzm_s*gUzm_s);
  gFzm_s=[[gLzm_s,zeros(2*n,1),zeros(2*n,1)]; ...
          [zeros(1,2*n),-dEsq_s,0]; ...
          [zeros(1,2*n),0,0]] + ...
         gVUzm_s + (gVUzm_s');

  % Construct stop band constraint matrix
  SgVzm_s=S_s*(gVzm_s');
  bFzm_s=[[(Fzm_s+gFzm_s),(SgVzm_s'),gUzm_s']; ...
          [SgVzm_s,(-(2*S_s)+dS_s),zeros(n+1)]; ...
          [gUzm_s,zeros(n+1),-dS_s]];

  % Define objective function
  if use_hessEsq
    Esqkdk=Esq+(gradEsq(1:N)*(dk'))+(dk*hessEsq(1:N,1:N)*(dk')/2);
  else
    Esqkdk=Esq+(gradEsq(1:N)*(dk'));
  endif

  % Solve for the SDP variables
  rho=10^floor(log10(Esq));
  printf("Using rho=%g, Esq=%g,Esq_p=%g, Esq_s=%g\n",rho,Esq,Esq_p,Esq_s);
  printf("gradEsq=[ ");printf("%g ",gradEsq);printf(" ]\n");
  ctol=1e-5;
  c1=ctol;c2=1e4;c3=ctol;
  Constraints=[ -k_max<=(k+dk)<=k_max, ...
                dEsq_p<=0, dEsq_s<=0, ...
                Esq_p+dEsq_p>=0, Esq_s+dEsq_s>=0, ...
                bFzm_p<=ctol, Q_p>=0, dS_p>=0, ...
                bFzm_s<=ctol, Q_s>=0, dS_s>=0, ...
                c1*eye(n+1)<=dS_p<=c2*eye(n+1), ...
                c1*eye(n+1)<=dS_s<=c2*eye(n+1), ...
                ((-2*S_p)+dS_p)<=-c3*eye(n+1), ...
                ((-2*S_s)+dS_s)<=-c3*eye(n+1) ];
  Objective=real(Esqkdk + (rho*norm(dz)^2));
  Options=sdpsettings("solver","sdpt3","maxit",100,"gaptol",tol);
  sol=optimize(Constraints,Objective,Options)
  if sol.problem
    error("YALMIP failed");
  endif
  
  % Sanity checks
  check(Constraints)
  
  S_p=value(dS_p);
  S_s=value(dS_s);

  schurOneMPAlatticeDoublyPipelinedDelay_kyp_lowpass_common_update;

  % Exit criterion
  if norm(value(dk)) < tol
    break;
  elseif m==maxiter_kyp
    warning("Exiting at maxiter_kyp!");
    break;
  endif

endfor
 
schurOneMPAlatticeDoublyPipelinedDelay_kyp_lowpass_common_finish;

% Done
toc
diary off
movefile(strcat(strf,".diary.tmp"),strcat(strf,".diary"));
