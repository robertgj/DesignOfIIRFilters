function [param,POP,cpuTime] = ExploitOptTool(versionSW,LSobjPoly,objPoly, ineqPolySys, lbd, ubd, POP, SDPinfo, SDPsolverInfo, SDPobjValue, cpuTime, param, minOrmax)
%%%%% <--- April 3, 2009
%%%%% April 3, 2009 --->
% Application of MATLAB functions
%   fmincon ('interior-point', 'active-set', 'trust-region-reflective' method)
%       for constrained minimization problems
%   lsqnonlin for nonlinear least square problems with bounds
% To use these functions, Optimization Toolbox is necessary.

if nargin == 12
	minOrmax = 'min';
end

POP.scaledErrorL = [];
POP.absErrorL = [];
POP.xVectL = [];
POP.objValueL = [];
cpuTime.localMethod = 0.0;
if ~isfield(param, 'POPsolver')
	return
elseif isempty(param.POPsolver)
	return
elseif ~exist('fmincon', 'file')
	fprintf('## Optimizaiton Toolbox is not available.\n\n');
	return
elseif isempty(POP.xVect) && SDPinfo.infeasibleSW == 0.5 
	if param.printLevel(1) >= 1
		fprintf('\n## Cannot apply %s of Optimiation Toolbox because\n', param.POPsolver);
		fprintf('## the SDP relaxation problem is infeasible or the solution\n');
		fprintf('## obtained by %s is very inaccurate.\n\n', param.SDPsolver);
	end
	if isfield(param, 'printFileName') && isstr(param.printFileName) && param.printLevel(2) > 0
		fileId = fopen(param.printFileName,'a+');
		fprintf(fileId, '\n## Cannot apply %s of Optimiation Toolbox because\n', param.POPsolver);
		fprintf(fileId, '## the SDP relaxation problem is infeasible or the obtained\n');
		fprintf(fileId, '## solution by %s is very inaccurate.\n\n', param.SDPsolver);
		fclose(fileId);
	end
	return	
elseif isempty(POP.xVect)
	if param.printLevel(1) >= 1
		fprintf('## Cannot apply %s of Optimiation Toolbox because\n', param.POPsolver);
		fprintf('## SparsePOP cannot generate an initial solution for %s.\n', param.POPsolver);
		if param.reduceMomentMatSW == 1 && param.reduceAMatSW == 1
			fprintf('## If you use %s in Optimization Toolbox for this problem,\n', param.POPsolver); 
			fprintf('## please solve this problem with\n');
			fprintf('## param.reduceMomentMatSW = 0 and param.reduceAMatSW == 0.\n\n');
		elseif param.reduceMomentMatSW == 1 && param.reduceAMatSW == 0
			fprintf('## If you use %s in Optimization Toolbox for this problem,\n', param.POPsolver); 
			fprintf('## please solve this problem with param.reduceMomentMatSW = 0.\n\n');
		elseif param.reduceMomentMatSW == 0 && param.reduceAMatSW == 1
			fprintf('## If you use %s in Optimization Toolbox for this problem,\n', param.POPsolver); 
			fprintf('## please solve this problem with param.reduceAMatSW = 0.\n\n');
		end
	end	
	if isfield(param, 'printFileName') && isstr(param.printFileName) && param.printLevel(2) > 0
		fileId = fopen(param.printFileName,'a+');
		fprintf(fileId, '## Cannot apply %s of Optimiation Toolbox because\n', param.POPsolver);
		fprintf(fileId, '## SparsePOP cannot generate an initial solution for %s.\n', param.POPsolver);
		if param.reduceMomentMatSW == 1 && param.reduceAMatSW == 1
			fprintf(fileId, '## If you use %s in Optimization Toolbox for this problem,\n', param.POPsolver); 
			fprintf(fileId, '## please solve this problem with\n');
			fprintf(fileId, '## param.reduceMomentMatSW = 0 and param.reduceAMatSW == 0.\n\n');
		elseif param.reduceMomentMatSW == 1 && param.reduceAMatSW == 0
			fprintf(fileId, '## If you use %s in Optimization Toolbox for this problem,\n', param.POPsolver); 
			fprintf(fileId, '## please solve this problem with param.reduceMomentMatSW = 0.\n\n');
		elseif param.reduceMomentMatSW == 0 && param.reduceAMatSW == 1
			fprintf(fileId, '## If you use %s in Optimization Toolbox for this problem,\n', param.POPsolver); 
			fprintf(fileId, '## please solve this problem with param.reduceAMatSW = 0.\n\n');
		end	
        fclose(fileId);
	end
	return
else
    v = ver('optim');
	if isempty(v)
		fprintf('## Optimizaiton Toolbox is not available.\n\n');
		return
	end
    verval = v.Version;
end
for i=1:size(ineqPolySys,2)
    if ineqPolySys{i}.typeCone == 2 || ineqPolySys{i}.typeCone == 3
        fprintf('\n## We cannot apply Optimization Toolbox into polynomial SDPs.\n');
        return
    end
end
if versionSW >= 210
    if isfield(param,'POPsolver') && ~isempty(LSobjPoly) && ...
            ~isempty(ineqPolySys) && strcmp(param.POPsolver,'lsqnonlin')
        fprintf('## The MATLAB function lsqnonlin for nonlnear least square problems\n');
        fprintf('## can not be used because the problem involves inequality and/or\n');
        fprintf('## equality constrants; ineqPolySys is nonempty. So trust-region-reflective\n');
        fprintf('## method will be used.\n');
        param.POPsolver = 'trust-region-reflective';
    end
    if  isfield(param,'POPsolver') && ...
            (strcmp(param.POPsolver,'trust-region-reflective') ||...
            strcmp(param.POPsolver,'active-set') || ...
            strcmp(param.POPsolver,'interior-point'))
        
        idx = strfind(verval, '.');
        if isempty(idx)
            ininV = str2double(verval);
        else
            ininV = str2double(verval(1:idx(1)));
        end
        if ininV >= 4
            options = optimset('Algorithm',param.POPsolver,'GradObj','on',...
                'GradConstr','on','HessFcn',@hessianfcn,'Display','off');
        else
            options = optimset('GradObj','on',...
                'GradConstr','on','HessMult',@hessianfcn,'Display','on');
            %options = optimset('GradObj','on',...
            %    'GradConstr','on','HessMult',@hessianfcn,'Display','off');
        end
        startingTime = tic;
        if (param.SDPsolverSW == 1) || (SDPinfo.infeasibleSW == -1) || ...
                (SDPsolverInfo.pinf == 0 && SDPsolverInfo.dinf == 0)
            [POP.xVectL,POP.objValueL,exitflag,output] = ...
                POPfmincon(objPoly,ineqPolySys,lbd,ubd,POP.xVect,options);
        else
            [POP.xVectL,POP.objValueL,exitflag,output] = ...
                POPfmincon(objPoly,ineqPolySys,lbd,ubd,[],options);
        end
        if strcmp(minOrmax, 'max')
            POP.objValueL = -POP.objValueL;
        end
        %
        if ~isempty(ineqPolySys)
            [POP.scaledErrorL,POP.absErrorL] = infeasibility2(ineqPolySys,POP.xVectL);
        else
            POP.scaledErrorL = 0;
            POP.absErrorL = 0;
        end
        %
        output.cputime = toc(startingTime);
        cpuTime.localMethod = output.cputime;
        if param.printLevel(1) >= 1
            %  printSolution2(1,ineqPolySys,POP,exitflag,output,options,SDPobjValue);
            printSolutionL(1,param.printLevel(1), POP,exitflag,output,options,SDPobjValue);
        end
        if ischar(param.printFileName) && ~isempty(param.printFileName)
            fileId = fopen(param.printFileName,'a+');
            %  printSolution2(fileId,ineqPolySys,POP,exitflag,output,options,SDPobjValue);
            printSolutionL(fileId, param.printLevel(2), POP,exitflag,output,options,SDPobjValue);
            fclose(fileId);
        end
    elseif isfield(param,'POPsolver') && ~isempty(LSobjPoly) && ...
            isempty(ineqPolySys) && strcmp(param.POPsolver,'lsqnonlin')
        options = optimset('Jacobian','on');  % ,'TolFun',1.0e-8,'Tolx',1.0e-8);
        startingTime = tic;
        if (param.SDPsolverSW == 1) || (SDPinfo.infeasibleSW == -1) || ...
                (SDPsolverInfo.pinf == 0 && SDPsolverInfo.dinf == 0)
            [POP.xVectL,POP.objValueL,exitflag,output] = ...
                POPlsqnonlin(LSobjPoly,lbd,ubd,POP.xVect,options);
        else
            [POP.xVectL,POP.objValueL,exitflag,output] = ...
                POPlsqnonlin(LSobjPoly,lbd,ubd,[],options);
        end
        if strcmp(minOrmax, 'max')
            POP.objValueL = -POP.objValueL;
        end
        %
        if ~isempty(ineqPolySys)
            [POP.scaledErrorL,POP.absErrorL] = infeasibility2(ineqPolySys,POP.xVectL);
            %             POP.scaledErrorL = scaledError;
            %             POP.absErrorL = infeasError;
        else
            POP.scaledErrorL = 0;
            POP.absErrorL = 0;
        end
        output.cputime = toc(startingTime);
        cpuTime.localMethod = output.cputime;
        if param.printLevel(1) >= 1
            %               printSolution2(1,ineqPolySys,POP,exitflag,output,options,SDPobjValue);
            printSolutionL(1,printLevel(1), POP,exitflag,output,options,SDPobjValue);
        end
        if ischar(param.printFileName) && ~isempty(param.printFileName)
            fileId = fopen(param.printFileName,'a+');
            %                printSolution2(fileId,ineqPolySys,POP,exitflag,output,options,SDPobjValue);
            printSolutionL(fileId,printLevel(2), POP,exitflag,output,options,SDPobjValue);
            fclose(fileId);
        end
    end
end
% <--- April 3, 2009
%%%%%

return
