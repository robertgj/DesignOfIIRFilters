% bin2SPT_test.m
% Copyright (C) 2017 Robert G. Jenssen

test_common;

unlink("bin2SPT_test.diary");
unlink("bin2SPT_test.diary.tmp");
diary bin2SPT_test.diary.tmp

format compact

% Test vectors : {num, nbits}
max_nbits=floor(log2(flintmax()))-2;
testvecs={...
% Test with 2 arguments
{1,max_nbits},...
{1,max_nbits+1},...
{1,8},...
{-1,8},...
{1,0},...
{-1,0},...
{0,8},...
{0,1},...
{1,1},...
{2,1},...
{-1,1},...
{0,2},...
{1,2},...
{-1,2},...
{-2,2},...
{1,8},...
{-1,8},...
{1.5,8},...
{-1.5,8},...
{-43,7},...
{43,7},...
{-43.4,7},...
{43.4,7},...
{-43.6,7},...
{43.6,7},...
{-42.9,7},...
{42.9,7},...
{bin2dec("010001101"),9},...
{-bin2dec("010001101"),9},...
{bin2dec("10101010"),9},...
{-bin2dec("10101010"),9},...
{129,8},...
{129,9},...
{-129,8},...
{-129,9},...
{128,8},...
{128,9},...
{-128,8},...
{127,8},...
{127,8},...
{-127,8},...
{127,max_nbits},...
{-127,max_nbits},...
{128,max_nbits},...
{-128,max_nbits},...
{129,8},...
{-129,8},...
{63.49,7},...
{63.51,7},...
% Test with a single argument
{0},...
{0.1},...
{-0.1},...
{0.5},...
{-0.5},...
{1},...
{-1},...
{1.1},...
{-1.1},...
{1023},...
{-1023},...
{1024},...
{-1024},...
{1025},...
{-1025}
};
function spt=testfun(vec)
  args=cell2mat(vec);
  x=args(1);

  if length(args)==2
    nbits=args(2);
    try
      spt=bin2SPT(x,nbits);
      printf("x=%6g, nbits=%d, spt(%d:-1:1)=[ ",x,nbits,nbits);
      printf("%2d ",fliplr(spt(:)'));
      printf("], ndigits=%d\n",sum(abs(spt)));
    catch err
      printf("Caught spt=bin2SPT(%g,%d): %s\n",x,nbits,err.message);
    end_try_catch
  else
    try
      spt=bin2SPT(x);
      printf("x=%6g, spt(%d:-1:1)=[ ",x,length(spt));
      printf("%2d ",fliplr(spt(:)'));
      printf("], ndigits=%d\n",sum(abs(spt)));
    catch err
      printf("Caught spt=bin2SPT(%g): %s\n",x,err.message);
    end_try_catch
  endif
endfunction

% Run the test vectors
cellfun(@testfun,testvecs,"UniformOutput",false);

% Exhaustive test with two arguments
nbits=10;
nscale=2^(nbits-1);
for k=-nscale:(nscale-1)
  spt=bin2SPT(k,nbits);
  y=sum((2.^(0:(nbits-1))).*spt);
  if y-k ~= 0
    printf("k=%3d, spt(%d:-1:1)=[",k,nbits);
    printf("%2d ",fliplr(spt(:)'));
    printf("], ndigits=%d\n",sum(abs(spt)));
    error("k=%d but y=%d",k,y);
  endif
endfor

% Exhaustive test with one argument
X=arrayfun(@bin2SPT,(-128:128),'UniformOutput',false)

% Test array for finding the number of coefficient adders
y=[   92,  -119,   -27,    75,   213; ...
     123,   128,   150,    28,  -202; ...
     -23,   146,    -4,   102,   206; ...
     231,    41,   158,   121,    62; ...
    -187,   197,   168,  -119,   114 ]
% Find the SPT representation
Y=arrayfun(@bin2SPT,y,'UniformOutput',false)
% Find the number of signed digits in each cell
z=cellfun(@(x) sum(abs(x)),Y)
% Find the cells for which the number of signed digits is more than 1
zz=z>1
% Find the number of additions
sum(sum((z-1).*zz))

% Done
diary off
movefile bin2SPT_test.diary.tmp bin2SPT_test.diary;
